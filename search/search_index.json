{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfae KodLab - Documentation Compl\u00e8te","text":"<p>Console de programmation ludique pour apprendre l'algorithmique en cr\u00e9ant des jeux 2D</p>"},{"location":"#table-des-matieres","title":"\ud83d\udccb Table des Mati\u00e8res","text":"<ol> <li>Introduction</li> <li>Installation et Utilisation</li> <li>Langage Kod</li> <li>Cr\u00e9er des Jeux</li> <li>Architecture Technique</li> <li>R\u00e9f\u00e9rence API</li> <li>Exemples et Tutoriels</li> <li>D\u00e9pannage</li> </ol>"},{"location":"#introduction","title":"Introduction","text":""},{"location":"#quest-ce-que-kodlab","title":"Qu'est-ce que KodLab ?","text":"<p>KodLab est un environnement de d\u00e9veloppement \u00e9ducatif con\u00e7u pour apprendre la programmation en cr\u00e9ant des jeux 2D. Il combine :</p> <ul> <li>Un langage simplifi\u00e9 (.kod) : Syntaxe intuitive inspir\u00e9e de Python et Pascal</li> <li>Un compilateur intelligent : Traduit automatiquement le code .kod en JavaScript ES6</li> <li>Un \u00e9mulateur int\u00e9gr\u00e9 : Console virtuelle avec rendu Canvas HTML5</li> <li>Une collection d'exemples : Jeux de r\u00e9f\u00e9rence pour apprendre</li> </ul>"},{"location":"#pourquoi-kodlab","title":"Pourquoi KodLab ?","text":"<p>\u2705 Simplicit\u00e9 : Pas de configuration complexe, tout fonctionne dans le navigateur \u2705 Apprentissage : Syntaxe accessible aux d\u00e9butants \u2705 Imm\u00e9diat : Voir le r\u00e9sultat en temps r\u00e9el \u2705 Ludique : Apprendre en cr\u00e9ant des jeux \u2705 Portable : Fonctionne sur n'importe quel navigateur moderne  </p>"},{"location":"#architecture-globale","title":"Architecture Globale","text":"<pre><code>KodLab/\n\u251c\u2500\u2500 \ud83d\udcc4 index.html          # Interface utilisateur\n\u251c\u2500\u2500 \ud83c\udfa8 styles.css          # Design moderne\n\u251c\u2500\u2500 \u2699\ufe0f main.js            # Orchestration principale\n\u251c\u2500\u2500 \ud83d\udd27 kodCompiler.js     # Compilateur .kod \u2192 JavaScript\n\u251c\u2500\u2500 \ud83c\udfae kodEmulator.js     # \u00c9mulateur de console\n\u251c\u2500\u2500 \ud83d\udcc1 examples/          # Jeux d'exemple\n\u2502   \u251c\u2500\u2500 pong.kod\n\u2502   \u251c\u2500\u2500 snake.kod\n\u2502   \u251c\u2500\u2500 asteroids.kod\n\u2502   \u2514\u2500\u2500 pandadventures.kod\n\u2514\u2500\u2500 \ud83d\udcda doc/              # Documentation (vous \u00eates ici)\n</code></pre>"},{"location":"#exemples-de-code","title":"Exemples de Code","text":"<p>Hello World anim\u00e9 :</p> <pre><code>let x = 0\n\nfunction start()\n    clearScreen(\"#000033\")\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n    x = x + 2\n    if x &gt; 400\n        x = 0\n    end\n    drawCircle(x, 150, 20, \"#FF6600\")\n    drawText(\"Hello KodLab!\", 100, 100, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"#coloration-kod-dans-vscode-extension-officielle","title":"\ud83c\udfa8 Coloration Kod dans VSCode (Extension officielle)","text":"<p>Pour profiter d'une exp\u00e9rience optimale lors de l'\u00e9dition de vos fichiers <code>.kod</code>, il est recommand\u00e9 d'installer l'extension officielle Kod pour Visual Studio Code.</p> <ul> <li>Fichier \u00e0 utiliser : <code>kod-official-0.0.1.vsix</code> (pr\u00e9sent \u00e0 la racine du projet)</li> <li>Installation rapide :<ol> <li>Ouvrez VSCode</li> <li>Faites <code>Ctrl+Maj+P</code> puis tapez <code>Extensions: Installer depuis un fichier .VSIX</code></li> <li>S\u00e9lectionnez le fichier <code>kod-official-0.0.1.vsix</code></li> <li>Red\u00e9marrez VSCode si besoin</li> </ol> </li> <li>R\u00e9sultat : Tous vos fichiers <code>.kod</code> b\u00e9n\u00e9ficient d'une coloration syntaxique adapt\u00e9e, pour un confort de lecture et de d\u00e9veloppement maximal !</li> </ul> <p>Cette extension est id\u00e9ale pour apprendre, coder et explorer les exemples KodLab dans les meilleures conditions.</p>"},{"location":"#prochaines-etapes","title":"Prochaines \u00c9tapes","text":"<ol> <li>\ud83d\udcd6 Lisez le Guide d'Utilisation</li> <li>\ud83e\udde0 Apprenez la Syntaxe Kod </li> <li>\ud83c\udfaf Suivez le Guide de Cr\u00e9ation de Jeux</li> <li>\ud83d\udd0d Explorez les Exemples</li> </ol> <p>Bon coding ! \ud83d\ude80</p>"},{"location":"api-reference/","title":"\ud83d\udcda API de R\u00e9f\u00e9rence - KodLab","text":"<p>Documentation compl\u00e8te de toutes les fonctions disponibles dans le langage Kod.</p>"},{"location":"api-reference/#table-des-matieres","title":"\ud83d\udccb Table des Mati\u00e8res","text":"<ol> <li>API Graphique</li> <li>API d'Entr\u00e9es</li> <li>Fonctions de Jeu</li> <li>Utilitaires</li> <li>Constantes</li> <li>Exemples d'Usage</li> </ol>"},{"location":"api-reference/#api-graphique","title":"API Graphique","text":""},{"location":"api-reference/#gestion-de-lecran","title":"Gestion de l'\u00c9cran","text":""},{"location":"api-reference/#clearscreencolor","title":"<code>clearScreen(color)</code>","text":"<p>Efface tout l'\u00e9cran avec la couleur sp\u00e9cifi\u00e9e.</p> <p>Param\u00e8tres: - <code>color</code> (string) : Couleur au format hexad\u00e9cimal ou nom</p> <p>Exemples:</p> <pre><code>clearScreen(\"#000000\")    // Noir\nclearScreen(\"#FFFFFF\")    // Blanc\nclearScreen(\"#001122\")    // Bleu fonc\u00e9\nclearScreen(\"red\")        // Rouge (noms limit\u00e9s)\n</code></pre> <p>Notes: - \u00c0 appeler une seule fois par frame, au d\u00e9but de <code>update()</code> - Obligatoire pour \u00e9viter les train\u00e9es d'affichage - Performance optimis\u00e9e pour les couleurs hexad\u00e9cimales</p>"},{"location":"api-reference/#formes-geometriques","title":"Formes G\u00e9om\u00e9triques","text":""},{"location":"api-reference/#drawrectx-y-width-height-color","title":"<code>drawRect(x, y, width, height, color)</code>","text":"<p>Dessine un rectangle plein.</p> <p>Param\u00e8tres: - <code>x</code> (number) : Position X du coin sup\u00e9rieur gauche - <code>y</code> (number) : Position Y du coin sup\u00e9rieur gauche - <code>width</code> (number) : Largeur du rectangle - <code>height</code> (number) : Hauteur du rectangle - <code>color</code> (string) : Couleur de remplissage</p> <p>Exemples:</p> <pre><code>drawRect(100, 50, 80, 40, \"#FF0000\")     // Rectangle rouge\ndrawRect(0, 0, 400, 20, \"#333333\")       // Barre sup\u00e9rieure\ndrawRect(playerX, playerY, 20, 20, \"#00FF00\")  // Joueur carr\u00e9\n</code></pre> <p>Cas d'Usage: - Plateformes et obstacles - Interface utilisateur (barres, boutons) - Joueurs et ennemis rectangulaires</p>"},{"location":"api-reference/#drawcirclex-y-radius-color","title":"<code>drawCircle(x, y, radius, color)</code>","text":"<p>Dessine un cercle plein.</p> <p>Param\u00e8tres: - <code>x</code> (number) : Position X du centre - <code>y</code> (number) : Position Y du centre - <code>radius</code> (number) : Rayon du cercle - <code>color</code> (string) : Couleur de remplissage</p> <p>Exemples:</p> <pre><code>drawCircle(200, 150, 25, \"#FFFF00\")      // Cercle jaune centr\u00e9\ndrawCircle(ballX, ballY, ballRadius, \"#FFFFFF\")  // Balle\ndrawCircle(mouseX, mouseY, 5, \"#FF0000\")         // Curseur\n</code></pre> <p>Cas d'Usage: - Balles et projectiles - Joueurs circulaires - Particules et effets - Zones de collision visibles</p>"},{"location":"api-reference/#drawlinex1-y1-x2-y2-color","title":"<code>drawLine(x1, y1, x2, y2, color)</code>","text":"<p>Dessine une ligne droite.</p> <p>Param\u00e8tres: - <code>x1</code> (number) : Position X du point de d\u00e9part - <code>y1</code> (number) : Position Y du point de d\u00e9part - <code>x2</code> (number) : Position X du point d'arriv\u00e9e - <code>y2</code> (number) : Position Y du point d'arriv\u00e9e - <code>color</code> (string) : Couleur de la ligne</p> <p>Exemples:</p> <pre><code>drawLine(0, 150, 400, 150, \"#666666\")    // Ligne horizontale\ndrawLine(0, 0, 400, 300, \"#FFFFFF\")      // Diagonale\ndrawLine(playerX, playerY, targetX, targetY, \"#FF0000\")  // Vis\u00e9e\n</code></pre> <p>Cas d'Usage: - Trajectoires et vis\u00e9es - Grilles et rep\u00e8res - Connexions entre objets - D\u00e9coration et interface</p>"},{"location":"api-reference/#drawpixelx-y-color","title":"<code>drawPixel(x, y, color)</code>","text":"<p>Dessine un pixel unique.</p> <p>Param\u00e8tres: - <code>x</code> (number) : Position X du pixel - <code>y</code> (number) : Position Y du pixel - <code>color</code> (string) : Couleur du pixel</p> <p>Exemples:</p> <pre><code>drawPixel(200, 150, \"#FFFFFF\")           // Pixel blanc\nfor i = 1 to 100\n    drawPixel(randomX, randomY, \"#FFFF00\")  // \u00c9toiles\nend\n</code></pre> <p>Cas d'Usage: - Effets de particules - \u00c9toiles et points lumineux - Pixel art d\u00e9taill\u00e9 - Debuggage de positions</p> <p>Notes: - Performance mod\u00e9r\u00e9e : \u00e9viter les milliers de pixels par frame - Id\u00e9al pour les d\u00e9tails fins</p>"},{"location":"api-reference/#texte-et-interface","title":"Texte et Interface","text":""},{"location":"api-reference/#drawtexttext-x-y-color","title":"<code>drawText(text, x, y, color)</code>","text":"<p>Affiche du texte \u00e0 l'\u00e9cran.</p> <p>Param\u00e8tres: - <code>text</code> (string) : Texte \u00e0 afficher (peut inclure des variables) - <code>x</code> (number) : Position X du texte (coin gauche) - <code>y</code> (number) : Position Y du texte (baseline) - <code>color</code> (string) : Couleur du texte</p> <p>Exemples:</p> <pre><code>drawText(\"Score: 1250\", 10, 20, \"#FFFFFF\")\ndrawText(\"GAME OVER\", 150, 150, \"#FF0000\")\ndrawText(\"Niveau \" + currentLevel, 10, 40, \"#FFFF00\")\ndrawText(\"Vies: \" + lives, 10, 60, \"#00FF00\")\ndrawText(\"Temps: \" + timeRemaining, 300, 20, \"#CYAN\")\n</code></pre> <p>Cas d'Usage: - Interface utilisateur (score, vies, temps) - Messages de jeu (game over, level up) - Debug et informations d\u00e9veloppeur - Dialogues et instructions</p> <p>Notes: - Police fixe : Arial 16px - Pas de retour \u00e0 la ligne automatique - Concat\u00e9nation avec <code>+</code> pour les variables</p>"},{"location":"api-reference/#api-audio","title":"API Audio","text":""},{"location":"api-reference/#gestion-des-sons","title":"Gestion des Sons","text":""},{"location":"api-reference/#playsoundnote-duration","title":"<code>playSound(note, duration)</code>","text":"<p>Joue une note musicale avec l'oscillateur int\u00e9gr\u00e9.</p> <p>Param\u00e8tres: - <code>note</code> (string) : Nom de la note \u00e0 jouer - <code>duration</code> (number, optionnel) : Dur\u00e9e en secondes (d\u00e9faut: 0.2)</p> <p>Notes disponibles: - <code>\"do\"</code> : Do (C4 - 261.63 Hz) - <code>\"re\"</code> : R\u00e9 (D4 - 293.66 Hz)  - <code>\"mi\"</code> : Mi (E4 - 329.63 Hz) - <code>\"fa\"</code> : Fa (F4 - 349.23 Hz) - <code>\"sol\"</code> : Sol (G4 - 392.00 Hz) - <code>\"la\"</code> : La (A4 - 440.00 Hz) - <code>\"si\"</code> : Si (B4 - 493.88 Hz) - <code>\"do2\"</code> : Do aigu (C5 - 523.25 Hz)</p> <p>Exemples:</p> <pre><code>playSound(\"do\")              // Note do, dur\u00e9e par d\u00e9faut (0.2s)\nplaySound(\"mi\", 0.5)         // Note mi pendant 0.5 secondes\nplaySound(\"sol\", 0.1)        // Note sol courte pour effet\n\n// Effets sonores de jeu\nif isKeyPressed(\"space\")\n    playSound(\"do\", 0.1)     // Son de tir\nend\n\nif collision\n    playSound(\"si\", 0.2)     // Son d'alerte\nend\n\n// M\u00e9lodie simple\nplaySound(\"do\", 0.3)\nplaySound(\"re\", 0.3)\nplaySound(\"mi\", 0.3)\n</code></pre> <p>Cas d'Usage: - Effets sonores d'actions (saut, tir, collision) - Feedback audio pour l'interface - M\u00e9lodies et musiques simples - Sons d'ambiance et notifications</p> <p>Notes techniques: - Sons g\u00e9n\u00e9r\u00e9s par Web Audio API (oscillateur square wave) - Volume avec fade-out automatique pour \u00e9viter les clics - N\u00e9cessite une interaction utilisateur pour initialiser l'audio - Compatible avec tous les navigateurs modernes</p>"},{"location":"api-reference/#api-dentrees","title":"API d'Entr\u00e9es","text":""},{"location":"api-reference/#gestion-du-clavier","title":"Gestion du Clavier","text":""},{"location":"api-reference/#iskeypressedkeyname","title":"<code>isKeyPressed(keyName)</code>","text":"<p>V\u00e9rifie si une touche est actuellement press\u00e9e.</p> <p>Param\u00e8tres: - <code>keyName</code> (string) : Nom de la touche \u00e0 v\u00e9rifier</p> <p>Valeur de retour: - <code>boolean</code> : <code>true</code> si press\u00e9e, <code>false</code> sinon</p> <p>Touches support\u00e9es:</p> <pre><code>// Fl\u00e8ches directionnelles (et \u00e9quivalents WASD)\nisKeyPressed(\"up\")        // \u2191 ou W\nisKeyPressed(\"down\")      // \u2193 ou S\nisKeyPressed(\"left\")      // \u2190 ou A\nisKeyPressed(\"right\")     // \u2192 ou D\n\n// Espace\nisKeyPressed(\"space\")     // Barre d'espace\n</code></pre> <p>Exemples:</p> <pre><code>// Mouvement basique\nif isKeyPressed(\"left\")\n    playerX = playerX - speed\nend\nif isKeyPressed(\"right\")\n    playerX = playerX + speed\nend\n\n// Actions\nif isKeyPressed(\"space\")\n    shoot()\nend\n\n// Contr\u00f4les combin\u00e9s\nif isKeyPressed(\"up\") &amp;&amp; isKeyPressed(\"space\")\n    jumpAndShoot()\nend\n</code></pre> <p>Notes: - D\u00e9tection en temps r\u00e9el (pas d'\u00e9v\u00e9nements) - Touches maintenues d\u00e9tect\u00e9es chaque frame - Majuscules/minuscules importantes : <code>\"space\"</code> pas <code>\"Space\"</code></p>"},{"location":"api-reference/#fonctions-de-jeu","title":"Fonctions de Jeu","text":""},{"location":"api-reference/#fonctions-obligatoires","title":"Fonctions Obligatoires","text":""},{"location":"api-reference/#function-start","title":"<code>function start()</code>","text":"<p>Fonction d'initialisation appel\u00e9e une seule fois au d\u00e9marrage du jeu.</p> <p>Usage:</p> <pre><code>function start()\n    // Initialisation des variables\n    playerX = 200\n    playerY = 150\n    score = 0\n\n    // Configuration initiale\n    clearScreen(\"#000033\")\n\n    // Messages de d\u00e9marrage\n    drawText(\"Jeu initialis\u00e9!\", 100, 100, \"#FFFFFF\")\nend\n</code></pre> <p>Cas d'Usage: - Initialisation des variables de jeu - Positionnement initial des objets - \u00c9cran de d\u00e9marrage - Configuration des param\u00e8tres</p>"},{"location":"api-reference/#function-update","title":"<code>function update()</code>","text":"<p>Boucle principale appel\u00e9e 60 fois par seconde.</p> <p>Usage:</p> <pre><code>function update()\n    // 1. Effacer l'\u00e9cran\n    clearScreen(\"#000033\")\n\n    // 2. Traiter les entr\u00e9es\n    handleInput()\n\n    // 3. Mettre \u00e0 jour la logique\n    updatePlayer()\n    updateEnemies()\n\n    // 4. V\u00e9rifier les collisions\n    checkCollisions()\n\n    // 5. Afficher les \u00e9l\u00e9ments\n    drawGame()\n\n    // 6. Interface utilisateur\n    drawUI()\nend\n</code></pre> <p>Structure recommand\u00e9e: 1. Effacement : <code>clearScreen()</code> 2. Entr\u00e9es : <code>isKeyPressed()</code> 3. Logique : Calculs et mises \u00e0 jour 4. Collisions : D\u00e9tections d'interaction 5. Rendu : Tous les <code>draw...()</code> 6. Interface : Score, vie, messages</p>"},{"location":"api-reference/#fonctions-personnalisees","title":"Fonctions Personnalis\u00e9es","text":"<p>Vous pouvez cr\u00e9er vos propres fonctions pour organiser votre code :</p> <pre><code>function updatePlayer()\n    // Mouvement\n    if isKeyPressed(\"left\")\n        playerX = playerX - playerSpeed\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + playerSpeed\n    end\n\n    // Limites\n    if playerX &lt; 0\n        playerX = 0\n    end\n    if playerX &gt; 380\n        playerX = 380\n    end\nend\n\nfunction drawPlayer()\n    drawRect(playerX, playerY, 20, 20, \"#00FF00\")\n\n    if hasShield\n        drawCircle(playerX + 10, playerY + 10, 25, \"#0066FF\")\n    end\nend\n\nfunction resetGame()\n    playerX = 200\n    playerY = 150\n    score = 0\n    gameOver = false\nend\n</code></pre> <p>Limitations importantes: - Pas de param\u00e8tres : <code>function maFonction(param)</code> \u274c - Pas de valeur de retour : <code>return value</code> \u274c - Acc\u00e8s variables globales : Toutes les variables sont partag\u00e9es</p>"},{"location":"api-reference/#utilitaires","title":"Utilitaires","text":""},{"location":"api-reference/#calculs-mathematiques","title":"Calculs Math\u00e9matiques","text":"<p>Op\u00e9rateurs disponibles :</p> <pre><code>// Arithm\u00e9tique\nlet somme = a + b\nlet difference = a - b\nlet produit = a * b\nlet quotient = a / b\nlet modulo = a % b      // Reste de la division\n\n// Comparaisons\na == b    // \u00c9galit\u00e9\na != b    // Diff\u00e9rence\na &lt; b     // Inf\u00e9rieur\na &gt; b     // Sup\u00e9rieur\na &lt;= b    // Inf\u00e9rieur ou \u00e9gal\na &gt;= b    // Sup\u00e9rieur ou \u00e9gal\n\n// Logique\na &amp;&amp; b    // ET logique\na || b    // OU logique\n!a        // NON logique\n</code></pre>"},{"location":"api-reference/#fonctions-mathematiques-simulees","title":"Fonctions Math\u00e9matiques Simul\u00e9es","text":"<pre><code>// Distance entre deux points (approximation)\nlet dx = x1 - x2\nlet dy = y1 - y2\nlet distance = (dx * dx) + (dy * dy)  // Distance au carr\u00e9\n\n// Valeur absolue\nlet abs = value &lt; 0 ? -value : value\n\n// Min/Max\nlet min = a &lt; b ? a : b\nlet max = a &gt; b ? a : b\n\n// \"Al\u00e9atoire\" simple (pseudo-al\u00e9atoire)\nlet random = ((frameCount * 7) + (playerX * 3)) % 100\n</code></pre>"},{"location":"api-reference/#constantes","title":"Constantes","text":""},{"location":"api-reference/#dimensions-de-lecran","title":"Dimensions de l'\u00c9cran","text":"<pre><code>// Taille du canvas\nlet SCREEN_WIDTH = 400\nlet SCREEN_HEIGHT = 300\n\n// Limites utiles\nlet MAX_X = 380  // 400 - largeur objet (20)\nlet MAX_Y = 280  // 300 - hauteur objet (20)\n</code></pre>"},{"location":"api-reference/#couleurs-predefinies","title":"Couleurs Pr\u00e9d\u00e9finies","text":"<pre><code>// Couleurs courantes (format hexad\u00e9cimal recommand\u00e9)\nlet BLACK = \"#000000\"\nlet WHITE = \"#FFFFFF\"\nlet RED = \"#FF0000\"\nlet GREEN = \"#00FF00\"\nlet BLUE = \"#0000FF\"\nlet YELLOW = \"#FFFF00\"\nlet CYAN = \"#00FFFF\"\nlet MAGENTA = \"#FF00FF\"\n\n// Couleurs de jeu typiques\nlet BACKGROUND = \"#000033\"\nlet PLAYER = \"#00FF00\"\nlet ENEMY = \"#FF0000\"\nlet UI_TEXT = \"#FFFFFF\"\nlet WARNING = \"#FFFF00\"\n</code></pre>"},{"location":"api-reference/#exemples-dusage","title":"Exemples d'Usage","text":""},{"location":"api-reference/#interface-utilisateur-complete","title":"Interface Utilisateur Compl\u00e8te","text":"<pre><code>let score = 0\nlet lives = 3\nlet level = 1\nlet time = 300\n\nfunction drawUI()\n    // Score en haut \u00e0 gauche\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\n\n    // Vies avec symboles\n    drawText(\"Vies:\", 10, 40, \"#FFFFFF\")\n    for i = 1 to lives\n        drawCircle(60 + (i * 15), 35, 5, \"#FF0000\")\n    end\n\n    // Niveau en haut \u00e0 droite\n    drawText(\"Niveau \" + level, 320, 20, \"#FFFF00\")\n\n    // Temps restant\n    let minutes = time / 60\n    let seconds = time % 60\n    drawText(\"Temps: \" + minutes + \":\" + seconds, 300, 40, \"#00FFFF\")\n\n    // Barre de sant\u00e9\n    drawRect(10, 270, 100, 10, \"#660000\")  // Fond\n    drawRect(10, 270, playerHealth, 10, \"#00FF00\")  // Sant\u00e9\n    drawText(\"Sant\u00e9\", 120, 280, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"api-reference/#systeme-de-particules-simple","title":"Syst\u00e8me de Particules Simple","text":"<pre><code>let particle1X = 0\nlet particle1Y = 0\nlet particle1Life = 0\n\nlet particle2X = 0\nlet particle2Y = 0\nlet particle2Life = 0\n\nfunction createExplosion(x, y)\n    particle1X = x\n    particle1Y = y\n    particle1Life = 30\n\n    particle2X = x + 10\n    particle2Y = y - 5\n    particle2Life = 25\nend\n\nfunction updateParticles()\n    if particle1Life &gt; 0\n        particle1Life = particle1Life - 1\n        particle1Y = particle1Y - 2\n    end\n\n    if particle2Life &gt; 0\n        particle2Life = particle2Life - 1\n        particle2Y = particle2Y - 1\n        particle2X = particle2X + 1\n    end\nend\n\nfunction drawParticles()\n    if particle1Life &gt; 0\n        let alpha = particle1Life / 30\n        if alpha &gt; 0.5\n            drawCircle(particle1X, particle1Y, 3, \"#FFFF00\")\n        else\n            drawCircle(particle1X, particle1Y, 2, \"#FF6600\")\n        end\n    end\n\n    if particle2Life &gt; 0\n        drawCircle(particle2X, particle2Y, 2, \"#FF0000\")\n    end\nend\n</code></pre>"},{"location":"api-reference/#detection-de-collision-avancee","title":"D\u00e9tection de Collision Avanc\u00e9e","text":"<pre><code>function checkRectCollision(x1, y1, w1, h1, x2, y2, w2, h2)\n    // Collision AABB (Axis-Aligned Bounding Box)\n    let collisionX = (x1 &lt; x2 + w2) &amp;&amp; (x1 + w1 &gt; x2)\n    let collisionY = (y1 &lt; y2 + h2) &amp;&amp; (y1 + h1 &gt; y2)\n\n    if collisionX &amp;&amp; collisionY\n        // Collision d\u00e9tect\u00e9e\n        return true\n    end\n    return false\nend\n\nfunction checkCircleCollision(x1, y1, r1, x2, y2, r2)\n    let dx = x1 - x2\n    let dy = y1 - y2\n    let distance = (dx * dx) + (dy * dy)\n    let radiusSum = (r1 + r2) * (r1 + r2)\n\n    if distance &lt; radiusSum\n        return true\n    end\n    return false\nend\n\nfunction checkPointInRect(px, py, rx, ry, rw, rh)\n    if (px &gt;= rx) &amp;&amp; (px &lt;= rx + rw) &amp;&amp; (py &gt;= ry) &amp;&amp; (py &lt;= ry + rh)\n        return true\n    end\n    return false\nend\n</code></pre>"},{"location":"api-reference/#animation-et-tweening","title":"Animation et Tweening","text":"<pre><code>let animTime = 0\nlet bounceHeight = 0\n\nfunction updateAnimation()\n    animTime = animTime + 1\n    if animTime &gt; 120\n        animTime = 0\n    end\n\n    // Rebond sinuso\u00efdal simplifi\u00e9\n    let phase = animTime / 60  // 0 \u00e0 2\n    if phase &lt; 1\n        bounceHeight = phase * 50  // Monte\n    else\n        bounceHeight = (2 - phase) * 50  // Descend\n    end\nend\n\nfunction drawAnimatedPlayer()\n    let finalY = playerY - bounceHeight\n    drawCircle(playerX, finalY, 15, \"#00FF00\")\n\n    // Ombre au sol\n    let shadowSize = 15 - (bounceHeight / 5)\n    drawCircle(playerX, playerY + 20, shadowSize, \"#333333\")\nend\n</code></pre>"},{"location":"api-reference/#machine-a-etats-de-jeu","title":"Machine \u00e0 \u00c9tats de Jeu","text":"<pre><code>let gameState = \"menu\"  // \"menu\", \"playing\", \"paused\", \"gameover\"\nlet stateTime = 0\n\nfunction update()\n    stateTime = stateTime + 1\n\n    if gameState == \"menu\"\n        updateMenu()\n    else if gameState == \"playing\"\n        updatePlaying()\n    else if gameState == \"paused\"\n        updatePaused()\n    else if gameState == \"gameover\"\n        updateGameOver()\n    end\nend\n\nfunction updateMenu()\n    clearScreen(\"#000033\")\n\n    // Animation du titre\n    let titleY = 100 + (stateTime / 10) % 20 - 10\n    drawText(\"MON JEU G\u00c9NIAL\", 120, titleY, \"#FFFF00\")\n\n    // Instructions clignotantes\n    if (stateTime / 30) % 2 &lt; 1\n        drawText(\"Appuyez sur ESPACE\", 120, 180, \"#FFFFFF\")\n    end\n\n    if isKeyPressed(\"space\")\n        gameState = \"playing\"\n        stateTime = 0\n        initGame()\n    end\nend\n\nfunction updatePlaying()\n    // Logique de jeu normale\n    handleGameInput()\n    updateGameLogic()\n    drawGame()\n\n    // Pause\n    if isKeyPressed(\"space\")\n        gameState = \"paused\"\n        stateTime = 0\n    end\nend\n\nfunction updatePaused()\n    // Redessiner le jeu en gris\u00e9/fig\u00e9\n    drawGame()\n\n    // Overlay de pause\n    drawRect(100, 100, 200, 100, \"#000066\")\n    drawText(\"PAUSE\", 170, 140, \"#FFFFFF\")\n    drawText(\"ESPACE pour continuer\", 110, 160, \"#CCCCCC\")\n\n    if isKeyPressed(\"space\")\n        gameState = \"playing\"\n        stateTime = 0\n    end\nend\n</code></pre>"},{"location":"api-reference/#conseils-de-performance","title":"\u26a1 Conseils de Performance","text":""},{"location":"api-reference/#optimisation-du-rendu","title":"Optimisation du Rendu","text":"<pre><code>// \u2705 Bon : Un seul clearScreen par frame\nfunction update()\n    clearScreen(\"#000033\")\n    drawAllObjects()\n    drawUI()\nend\n\n// \u274c \u00c9viter : Multiples clearScreen\nfunction update()\n    clearScreen(\"#000033\")\n    drawPlayer()\n    clearScreen(\"#000033\")  // \u274c Inefficace\n    drawEnemies()\nend\n</code></pre>"},{"location":"api-reference/#limitation-des-calculs","title":"Limitation des Calculs","text":"<pre><code>// \u2705 Calculer une fois, utiliser plusieurs fois\nlet playerCenterX = playerX + 10\nlet playerCenterY = playerY + 10\n\ndrawCircle(playerCenterX, playerCenterY, 15, \"#00FF00\")\ncheckCollision(playerCenterX, playerCenterY)\n\n// \u274c Calculs r\u00e9p\u00e9titifs\ndrawCircle(playerX + 10, playerY + 10, 15, \"#00FF00\")\ncheckCollision(playerX + 10, playerY + 10)  // Recalcule\n</code></pre>"},{"location":"api-reference/#gestion-des-objets-multiples","title":"Gestion des Objets Multiples","text":"<pre><code>// Technique pour simuler les tableaux sans support natif\nlet enemy1X = 100\nlet enemy1Y = 50\nlet enemy1Active = true\n\nlet enemy2X = 200\nlet enemy2Y = 50\nlet enemy2Active = true\n\nfunction updateAllEnemies()\n    if enemy1Active\n        updateEnemy1()\n    end\n    if enemy2Active\n        updateEnemy2()\n    end\nend\n</code></pre> <p>Cette API couvre toutes les fonctionnalit\u00e9s disponibles dans KodLab. Pour des exemples complets, consultez les Exemples de Jeux !</p> <p>\ud83d\ude80 Bon d\u00e9veloppement avec KodLab !</p>"},{"location":"architecture/","title":"\ud83c\udfd7\ufe0f Architecture Technique - KodLab","text":"<p>Cette documentation d\u00e9taille l'architecture interne de KodLab, le processus de compilation, et le fonctionnement de l'\u00e9mulateur.</p>"},{"location":"architecture/#table-des-matieres","title":"\ud83d\udccb Table des Mati\u00e8res","text":"<ol> <li>Vue d'Ensemble</li> <li>Compilateur Kod</li> <li>\u00c9mulateur de Console</li> <li>Interface Utilisateur</li> <li>Flux de Donn\u00e9es</li> <li>Gestion des Erreurs</li> <li>Performance et Optimisations</li> </ol>"},{"location":"architecture/#vue-densemble","title":"Vue d'Ensemble","text":""},{"location":"architecture/#architecture-modulaire","title":"Architecture Modulaire","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    index.html                       \u2502\n\u2502  Interface Utilisateur + Monaco Editor + Canvas    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   main.js                          \u2502\n\u2502        Orchestration et Communication               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  kodCompiler.js   \u2502    \u2502     kodEmulator.js        \u2502\n\u2502  .kod \u2192 JavaScript\u2502    \u2502   Ex\u00e9cution + Canvas      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/#technologies-utilisees","title":"Technologies Utilis\u00e9es","text":"<ul> <li>Frontend : HTML5, CSS3, JavaScript ES6+</li> <li>\u00c9diteur : Monaco Editor (VS Code)</li> <li>Rendu : Canvas 2D Context</li> <li>Parsing : Expressions r\u00e9guli\u00e8res et AST simple</li> <li>Compilation : Transpilation vers JavaScript ES6 Classes</li> </ul>"},{"location":"architecture/#compilateur-kod","title":"Compilateur Kod","text":""},{"location":"architecture/#processus-de-compilation","title":"Processus de Compilation","text":""},{"location":"architecture/#1-analyse-lexicale-tokenisation","title":"1. Analyse Lexicale (Tokenisation)","text":"<pre><code>// kodCompiler.js - M\u00e9thode compile()\ncompile(kodCode) {\n    // 1. Nettoyage et pr\u00e9paration\n    const lines = kodCode\n        .split('\\n')\n        .map(line =&gt; line.trim())\n        .filter(line =&gt; line.length &gt; 0 &amp;&amp; !line.startsWith('//'));\n\n    // 2. S\u00e9paration variables/fonctions\n    let variables = [];\n    let functions = [];\n    let i = 0;\n\n    // 3. Collecte des variables globales\n    while (i &lt; lines.length &amp;&amp; !lines[i].startsWith('function')) {\n        const varMatch = line.match(/^let\\s+(\\w+)\\s*=\\s*(.+)$/);\n        if (varMatch) {\n            variables.push({ name: varMatch[1], value: varMatch[2] });\n        }\n        i++;\n    }\n\n    // 4. Collecte et compilation des fonctions\n    // ...\n}\n</code></pre>"},{"location":"architecture/#2-analyse-syntaxique-parsing","title":"2. Analyse Syntaxique (Parsing)","text":"<pre><code>// Extraction des fonctions avec gestion des blocs\nwhile (i &lt; lines.length) {\n    if (lines[i].startsWith('function') || lines[i].match(/^(start|update)\\s*\\(/)) {\n        const funcName = this.extractFunctionName(lines[i]);\n        i++; // Passe la ligne de d\u00e9claration\n\n        let funcBody = [];\n        let braceLevel = 0;\n\n        // Parse du corps de fonction\n        while (i &lt; lines.length &amp;&amp; (lines[i] !== 'end' || braceLevel &gt; 0)) {\n            const line = lines[i];\n\n            if (line === 'end') {\n                braceLevel--;\n                funcBody.push('        }');\n            } else {\n                const compiled = this.compileStatement(line);\n                if (compiled.trim()) {\n                    funcBody.push('        ' + compiled);\n                    // D\u00e9tection des structures de contr\u00f4le\n                    if (compiled.includes('if (') || \n                        compiled.includes('for (') || \n                        compiled.includes('while (')) {\n                        braceLevel++;\n                    }\n                }\n            }\n            i++;\n        }\n\n        functions.push({ name: funcName, body: funcBody });\n    }\n    i++;\n}\n</code></pre>"},{"location":"architecture/#3-compilation-des-instructions","title":"3. Compilation des Instructions","text":"<pre><code>compileStatement(line) {\n    // 1. Structures de contr\u00f4le\n    if (line.startsWith('if ')) {\n        return this.compileIf(line);\n    } else if (line.startsWith('else if ')) {\n        return this.compileElseIf(line);\n    } else if (line === 'else') {\n        return '} else {';\n    } else if (line.startsWith('for ')) {\n        return this.compileFor(line);\n    } else if (line.startsWith('while ')) {\n        return this.compileWhile(line);\n    }\n\n    // 2. Assignations\n    else if (line.match(/^\\w+\\s*=\\s*.+$/)) {\n        return this.compileAssignment(line);\n    }\n\n    // 3. Appels de fonction\n    else {\n        return this.compileFunctionCall(line);\n    }\n}\n\n// Compilation sp\u00e9cifique des conditions\ncompileIf(line) {\n    const condition = line.substring(3).trim(); // Enl\u00e8ve 'if '\n    const jsCondition = this.compileExpression(condition);\n    return `if (${jsCondition}) {`;\n}\n\n// Compilation des expressions\ncompileExpression(expr) {\n    // Op\u00e9rateurs logiques Kod \u2192 JavaScript\n    expr = expr.replace(/\\s+and\\s+/g, ' &amp;&amp; ');\n    expr = expr.replace(/\\s+or\\s+/g, ' || ');\n    expr = expr.replace(/\\s+not\\s+/g, ' !');\n\n    // Appels de fonctions API\n    expr = expr.replace(/isKeyPressed\\s*\\(/g, 'this.isKeyPressed(');\n\n    // Variables \u2192 propri\u00e9t\u00e9s de classe\n    expr = expr.replace(/\\b(\\w+)\\b/g, (match) =&gt; {\n        if (this.isVariable(match)) {\n            return `this.${match}`;\n        }\n        return match;\n    });\n\n    return expr;\n}\n</code></pre>"},{"location":"architecture/#4-generation-du-code-javascript","title":"4. G\u00e9n\u00e9ration du Code JavaScript","text":"<pre><code>generateGameClass(variables, functions) {\n    let code = `\n// Code g\u00e9n\u00e9r\u00e9 automatiquement par le compilateur .kod\nclass KodGame {\n    constructor(emulator) {\n        this.emulator = emulator;\n        this.ctx = emulator.ctx;\n        this.canvas = emulator.canvas;\n        this.keys = emulator.keys;\n\n        // Variables globales du jeu\n`;\n\n    // Injection des variables comme propri\u00e9t\u00e9s\n    for (let variable of variables) {\n        code += `        this.${variable.name} = ${variable.value};\\n`;\n    }\n\n    code += `    }\n\n    // === API GRAPHIQUE ===\n    clearScreen(color = '#000000') {\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    drawRect(x, y, width, height, color) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(x, y, width, height);\n    }\n\n    // ... autres m\u00e9thodes API ...\n\n    // === FONCTIONS UTILISATEUR ===\n`;\n\n    // Injection des fonctions compil\u00e9es\n    for (let func of functions) {\n        code += `    ${func.name}() {\\n`;\n        code += func.body.join('\\n') + '\\n';\n        code += `    }\\n\\n`;\n    }\n\n    code += `}`;\n\n    // Nettoyage des r\u00e9f\u00e9rences doubles\n    code = code.replace(/this\\.this\\./g, 'this.');\n    code = code.replace(/\\.{2,}/g, '.');\n\n    return code;\n}\n</code></pre>"},{"location":"architecture/#gestion-des-erreurs-de-compilation","title":"Gestion des Erreurs de Compilation","text":"<pre><code>compile(kodCode) {\n    try {\n        // Processus de compilation...\n        return { success: true, code: jsCode };\n    } catch (error) {\n        return { \n            success: false, \n            error: this.formatCompilerError(error)\n        };\n    }\n}\n\nformatCompilerError(error) {\n    // Localisation de l'erreur\n    const lineMatch = error.message.match(/line (\\d+)/);\n    if (lineMatch) {\n        const lineNum = parseInt(lineMatch[1]);\n        return `Erreur ligne ${lineNum}: ${error.message}`;\n    }\n\n    // Erreurs de syntaxe courantes\n    if (error.message.includes('unexpected token')) {\n        return 'Erreur de syntaxe: v\u00e9rifiez les parenth\u00e8ses et la structure des blocs';\n    }\n\n    return `Erreur de compilation: ${error.message}`;\n}\n</code></pre>"},{"location":"architecture/#emulateur-de-console","title":"\u00c9mulateur de Console","text":""},{"location":"architecture/#architecture-de-lemulateur","title":"Architecture de l'\u00c9mulateur","text":"<pre><code>class KodEmulator {\n    constructor(canvasId) {\n        // Initialisation du canvas\n        this.canvas = document.getElementById(canvasId);\n        this.ctx = this.canvas.getContext('2d');\n\n        // \u00c9tat de l'\u00e9mulateur\n        this.gameInstance = null;\n        this.isRunning = false;\n        this.animationId = null;\n\n        // M\u00e9triques de performance\n        this.lastFrameTime = 0;\n        this.fps = 0;\n        this.frameCount = 0;\n\n        // Gestion des entr\u00e9es\n        this.keys = {};\n\n        this.setupEventListeners();\n        this.setupCanvas();\n    }\n}\n</code></pre>"},{"location":"architecture/#boucle-de-jeu-principal","title":"Boucle de Jeu Principal","text":"<pre><code>// D\u00e9marrage du jeu\nrun() {\n    if (!this.gameInstance) {\n        return { success: false, error: 'Aucun jeu charg\u00e9' };\n    }\n\n    this.isRunning = true;\n    this.lastFrameTime = performance.now();\n\n    // Appel initial de start()\n    if (typeof this.gameInstance.start === 'function') {\n        this.gameInstance.start();\n    }\n\n    // Lancement de la boucle principale\n    this.gameLoop();\n\n    return { success: true, message: 'Jeu d\u00e9marr\u00e9' };\n}\n\n// Boucle de rendu 60 FPS\ngameLoop() {\n    if (!this.isRunning) return;\n\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastFrameTime;\n\n    // Calcul FPS\n    this.frameCount++;\n    if (currentTime - this.fpsUpdateTime &gt;= 1000) {\n        this.fps = Math.round(this.frameCount * 1000 / (currentTime - this.fpsUpdateTime));\n        this.frameCount = 0;\n        this.fpsUpdateTime = currentTime;\n    }\n\n    // Appel de la fonction update() du jeu\n    try {\n        if (typeof this.gameInstance.update === 'function') {\n            this.gameInstance.update();\n        }\n    } catch (error) {\n        this.handleRuntimeError(error);\n        return;\n    }\n\n    this.lastFrameTime = currentTime;\n\n    // Programmer la prochaine frame\n    this.animationId = requestAnimationFrame(() =&gt; this.gameLoop());\n}\n</code></pre>"},{"location":"architecture/#gestion-des-entrees","title":"Gestion des Entr\u00e9es","text":"<pre><code>setupEventListeners() {\n    // Capture des \u00e9v\u00e9nements clavier\n    document.addEventListener('keydown', (e) =&gt; {\n        this.handleKeyEvent(e, true);\n    });\n\n    document.addEventListener('keyup', (e) =&gt; {\n        this.handleKeyEvent(e, false);\n    });\n\n    // Pr\u00e9vention du scroll avec les fl\u00e8ches\n    document.addEventListener('keydown', (e) =&gt; {\n        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Space'].includes(e.code)) {\n            e.preventDefault();\n        }\n    });\n}\n\nhandleKeyEvent(event, isPressed) {\n    // Mapping des touches\n    const keyMap = {\n        'ArrowUp': 'up',\n        'ArrowDown': 'down', \n        'ArrowLeft': 'left',\n        'ArrowRight': 'right',\n        'Space': 'space',\n        // Support WASD\n        'KeyW': 'up',\n        'KeyS': 'down',\n        'KeyA': 'left',\n        'KeyD': 'right'\n    };\n\n    const mappedKey = keyMap[event.code];\n    if (mappedKey) {\n        this.keys[mappedKey] = isPressed;\n    }\n}\n\n// API accessible depuis les jeux\nisKeyPressed(key) {\n    return Boolean(this.keys[key]);\n}\n</code></pre>"},{"location":"architecture/#configuration-du-canvas","title":"Configuration du Canvas","text":"<pre><code>setupCanvas() {\n    // Configuration pour le pixel art\n    this.ctx.imageSmoothingEnabled = false;\n    this.canvas.style.imageRendering = 'pixelated';\n\n    // \u00c9cran noir par d\u00e9faut\n    this.clearScreen('#000000');\n\n    // Message d'accueil\n    this.ctx.fillStyle = '#666';\n    this.ctx.font = '20px Arial';\n    this.ctx.textAlign = 'center';\n    this.ctx.fillText('KodLab Ready', this.canvas.width / 2, this.canvas.height / 2);\n    this.ctx.fillText('Compilez et lancez votre code!', this.canvas.width / 2, this.canvas.height / 2 + 30);\n}\n\n// API de rendu optimis\u00e9e\nclearScreen(color = '#000000') {\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n}\n\ndrawRect(x, y, width, height, color) {\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(x, y, width, height);\n}\n\ndrawCircle(x, y, radius, color) {\n    this.ctx.fillStyle = color;\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\n    this.ctx.fill();\n}\n\ndrawText(text, x, y, color) {\n    this.ctx.fillStyle = color;\n    this.ctx.font = '16px Arial';\n    this.ctx.textAlign = 'left';\n    this.ctx.fillText(text, x, y);\n}\n</code></pre>"},{"location":"architecture/#interface-utilisateur","title":"Interface Utilisateur","text":""},{"location":"architecture/#structure-html","title":"Structure HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;KodLab&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;!-- En-t\u00eate --&gt;\n        &lt;header class=\"header\"&gt;\n            &lt;h1&gt;\ud83c\udfae KodLab&lt;/h1&gt;\n            &lt;div class=\"controls\"&gt;\n                &lt;select id=\"exampleSelect\"&gt;\n                    &lt;option value=\"\"&gt;S\u00e9lectionner un exemple&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/div&gt;\n        &lt;/header&gt;\n\n        &lt;!-- Zone principale --&gt;\n        &lt;main class=\"main\"&gt;\n            &lt;!-- \u00c9diteur de code --&gt;\n            &lt;section class=\"editor-section\"&gt;\n                &lt;div id=\"editor\"&gt;&lt;/div&gt;\n                &lt;div class=\"editor-controls\"&gt;\n                    &lt;button id=\"compileBtn\"&gt;\ud83d\udd27 Compiler&lt;/button&gt;\n                    &lt;button id=\"runBtn\"&gt;\u25b6\ufe0f Lancer&lt;/button&gt;\n                    &lt;button id=\"stopBtn\"&gt;\u23f9\ufe0f Stop&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/section&gt;\n\n            &lt;!-- Console de jeu --&gt;\n            &lt;section class=\"console-section\"&gt;\n                &lt;div class=\"console-header\"&gt;\n                    &lt;h3&gt;\ud83c\udfaf Console de Jeu&lt;/h3&gt;\n                    &lt;span id=\"fpsDisplay\"&gt;FPS: --&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;canvas id=\"gameCanvas\" width=\"400\" height=\"300\"&gt;&lt;/canvas&gt;\n            &lt;/section&gt;\n        &lt;/main&gt;\n\n        &lt;!-- Console de debug --&gt;\n        &lt;footer class=\"console\"&gt;\n            &lt;div id=\"consoleOutput\"&gt;&lt;/div&gt;\n        &lt;/footer&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Scripts --&gt;\n    &lt;script src=\"https://unpkg.com/monaco-editor@0.44.0/min/vs/loader.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"kodCompiler.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"kodEmulator.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"architecture/#integration-monaco-editor","title":"Int\u00e9gration Monaco Editor","text":"<pre><code>// main.js - Configuration de l'\u00e9diteur\nrequire.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@0.44.0/min/vs' }});\n\nrequire(['vs/editor/editor.main'], function () {\n    // Configuration de la coloration syntaxique pour .kod\n    monaco.languages.register({ id: 'kod' });\n\n    monaco.languages.setMonarchTokensProvider('kod', {\n        tokenizer: {\n            root: [\n                // Mots-cl\u00e9s\n                [/\\b(function|if|else|end|for|while|let|to|step)\\b/, 'keyword'],\n\n                // Fonctions API\n                [/\\b(clearScreen|drawRect|drawCircle|drawText|drawLine|isKeyPressed)\\b/, 'function'],\n\n                // Nombres\n                [/\\d+(\\.\\d+)?/, 'number'],\n\n                // Cha\u00eenes\n                [/\"[^\"]*\"/, 'string'],\n                [/'[^']*'/, 'string'],\n\n                // Commentaires\n                [/\\/\\/.*$/, 'comment'],\n\n                // Op\u00e9rateurs\n                [/[+\\-*\\/=&lt;&gt;!&amp;|]/, 'operator'],\n            ]\n        }\n    });\n\n    // Cr\u00e9ation de l'\u00e9diteur\n    window.editor = monaco.editor.create(document.getElementById('editor'), {\n        value: getDefaultCode(),\n        language: 'kod',\n        theme: 'vs-dark',\n        automaticLayout: true,\n        minimap: { enabled: false },\n        scrollBeyondLastLine: false,\n        fontSize: 14,\n        tabSize: 4\n    });\n});\n\nfunction getDefaultCode() {\n    return `// Bienvenue dans KodLab !\n// Cr\u00e9ez votre premier jeu en modifiant ce code\n\nlet x = 200\nlet y = 150\n\nfunction start()\n    clearScreen(\"#000033\")\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Contr\u00f4les\n    if isKeyPressed(\"left\")\n        x = x - 3\n    end\n    if isKeyPressed(\"right\")\n        x = x + 3\n    end\n\n    // Affichage\n    drawCircle(x, y, 20, \"#FF6600\")\n    drawText(\"Utilisez les fl\u00e8ches!\", 10, 20, \"#FFFFFF\")\nend`;\n}\n</code></pre>"},{"location":"architecture/#flux-de-donnees","title":"Flux de Donn\u00e9es","text":""},{"location":"architecture/#cycle-de-developpement","title":"Cycle de D\u00e9veloppement","text":"<pre><code>1. \u00c9criture du Code (.kod)\n   \u2193\n2. Compilation (kodCompiler.js)\n   \u251c\u2500 Succ\u00e8s \u2192 Code JavaScript ES6\n   \u2514\u2500 Erreur \u2192 Message d'erreur\n   \u2193\n3. Chargement dans l'\u00c9mulateur\n   \u251c\u2500 eval() du code compil\u00e9\n   \u251c\u2500 Cr\u00e9ation instance KodGame\n   \u2514\u2500 Liaison avec l'\u00e9mulateur\n   \u2193\n4. Ex\u00e9cution\n   \u251c\u2500 Appel start() (une fois)\n   \u251c\u2500 Boucle update() (60 FPS)\n   \u251c\u2500 Gestion des entr\u00e9es\n   \u2514\u2500 Rendu Canvas\n</code></pre>"},{"location":"architecture/#communication-entre-modules","title":"Communication entre Modules","text":"<pre><code>// main.js - Orchestration\nclass KodLabApp {\n    constructor() {\n        this.compiler = new KodCompiler();\n        this.emulator = new KodEmulator('gameCanvas');\n        this.editor = null; // Monaco Editor\n\n        this.setupEventListeners();\n    }\n\n    compile() {\n        const code = this.editor.getValue();\n        const result = this.compiler.compile(code);\n\n        if (result.success) {\n            this.logMessage('\u2705 Compilation r\u00e9ussie !', 'success');\n            this.compiledCode = result.code;\n            return true;\n        } else {\n            this.logMessage('\u274c ' + result.error, 'error');\n            return false;\n        }\n    }\n\n    run() {\n        if (!this.compiledCode) {\n            if (!this.compile()) return;\n        }\n\n        // Chargement dans l'\u00e9mulateur\n        const loadResult = this.emulator.loadGame(this.compiledCode);\n        if (loadResult.success) {\n            // D\u00e9marrage du jeu\n            const runResult = this.emulator.run();\n            if (runResult.success) {\n                this.logMessage('\u25b6\ufe0f ' + runResult.message, 'success');\n                this.updateUI('running');\n            } else {\n                this.logMessage('\u274c ' + runResult.error, 'error');\n            }\n        } else {\n            this.logMessage('\u274c ' + loadResult.error, 'error');\n        }\n    }\n\n    stop() {\n        this.emulator.stop();\n        this.logMessage('\u23f9\ufe0f Jeu arr\u00eat\u00e9', 'info');\n        this.updateUI('stopped');\n    }\n}\n</code></pre>"},{"location":"architecture/#gestion-des-erreurs","title":"Gestion des Erreurs","text":""},{"location":"architecture/#types-derreurs","title":"Types d'Erreurs","text":""},{"location":"architecture/#1-erreurs-de-compilation","title":"1. Erreurs de Compilation","text":"<pre><code>// Erreurs syntaxiques\n\"Erreur ligne 15: fonction 'drawCircl' inconnue\"\n\"Erreur ligne 8: 'end' attendu apr\u00e8s 'if'\"\n\"Erreur ligne 22: variable 'speed' non d\u00e9clar\u00e9e\"\n\n// Erreurs de structure\n\"Fonction 'start' ou 'update' manquante\"\n\"Bloc non ferm\u00e9: v\u00e9rifiez vos 'end'\"\n</code></pre>"},{"location":"architecture/#2-erreurs-dexecution","title":"2. Erreurs d'Ex\u00e9cution","text":"<pre><code>// Erreurs JavaScript g\u00e9n\u00e9r\u00e9es\ntry {\n    this.gameInstance.update();\n} catch (error) {\n    this.handleRuntimeError(error);\n}\n\nhandleRuntimeError(error) {\n    let message = 'Erreur d\\'ex\u00e9cution: ';\n\n    if (error.name === 'ReferenceError') {\n        message += 'Variable ou fonction non d\u00e9finie';\n    } else if (error.name === 'TypeError') {\n        message += 'Type de donn\u00e9es incorrect';\n    } else {\n        message += error.message;\n    }\n\n    this.logError(message);\n    this.stop();\n}\n</code></pre>"},{"location":"architecture/#systeme-de-logging","title":"Syst\u00e8me de Logging","text":"<pre><code>class Logger {\n    static log(message, type = 'info') {\n        const console = document.getElementById('consoleOutput');\n        const timestamp = new Date().toLocaleTimeString();\n\n        const entry = document.createElement('div');\n        entry.className = `console-entry ${type}`;\n        entry.innerHTML = `&lt;span class=\"timestamp\"&gt;[${timestamp}]&lt;/span&gt; ${message}`;\n\n        console.appendChild(entry);\n        console.scrollTop = console.scrollHeight;\n\n        // Limite le nombre d'entr\u00e9es\n        while (console.children.length &gt; 100) {\n            console.removeChild(console.firstChild);\n        }\n    }\n\n    static clear() {\n        document.getElementById('consoleOutput').innerHTML = '';\n    }\n}\n</code></pre>"},{"location":"architecture/#performance-et-optimisations","title":"Performance et Optimisations","text":""},{"location":"architecture/#optimisations-du-compilateur","title":"Optimisations du Compilateur","text":"<pre><code>// Cache des expressions compil\u00e9es\nclass KodCompiler {\n    constructor() {\n        this.expressionCache = new Map();\n        this.variableRegistry = new Set();\n    }\n\n    compileExpression(expr) {\n        // Utilisation du cache\n        if (this.expressionCache.has(expr)) {\n            return this.expressionCache.get(expr);\n        }\n\n        const compiled = this.doCompileExpression(expr);\n        this.expressionCache.set(expr, compiled);\n        return compiled;\n    }\n}\n</code></pre>"},{"location":"architecture/#optimisations-de-lemulateur","title":"Optimisations de l'\u00c9mulateur","text":"<pre><code>// Pool d'objets pour \u00e9viter le garbage collection\nclass ObjectPool {\n    constructor(createFn, resetFn, initialSize = 10) {\n        this.createFn = createFn;\n        this.resetFn = resetFn;\n        this.available = [];\n        this.inUse = [];\n\n        // Pr\u00e9-allocation\n        for (let i = 0; i &lt; initialSize; i++) {\n            this.available.push(this.createFn());\n        }\n    }\n\n    acquire() {\n        let obj = this.available.pop();\n        if (!obj) {\n            obj = this.createFn();\n        }\n        this.inUse.push(obj);\n        return obj;\n    }\n\n    release(obj) {\n        const index = this.inUse.indexOf(obj);\n        if (index &gt;= 0) {\n            this.inUse.splice(index, 1);\n            this.resetFn(obj);\n            this.available.push(obj);\n        }\n    }\n}\n</code></pre>"},{"location":"architecture/#optimisations-de-rendu","title":"Optimisations de Rendu","text":"<pre><code>// Batch rendering pour r\u00e9duire les appels Canvas\nclass BatchRenderer {\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.batches = new Map();\n    }\n\n    addRect(x, y, w, h, color) {\n        if (!this.batches.has(color)) {\n            this.batches.set(color, []);\n        }\n        this.batches.get(color).push({type: 'rect', x, y, w, h});\n    }\n\n    flush() {\n        for (const [color, shapes] of this.batches) {\n            this.ctx.fillStyle = color;\n\n            for (const shape of shapes) {\n                if (shape.type === 'rect') {\n                    this.ctx.fillRect(shape.x, shape.y, shape.w, shape.h);\n                }\n            }\n        }\n\n        this.batches.clear();\n    }\n}\n</code></pre>"},{"location":"architecture/#metriques-de-performance","title":"M\u00e9triques de Performance","text":"<pre><code>class PerformanceMonitor {\n    constructor() {\n        this.frameTime = 0;\n        this.fps = 0;\n        this.memoryUsage = 0;\n        this.drawCalls = 0;\n    }\n\n    startFrame() {\n        this.frameStartTime = performance.now();\n        this.drawCalls = 0;\n    }\n\n    endFrame() {\n        this.frameTime = performance.now() - this.frameStartTime;\n        this.fps = Math.round(1000 / this.frameTime);\n\n        // Collecte m\u00e9moire (si disponible)\n        if (performance.memory) {\n            this.memoryUsage = Math.round(performance.memory.usedJSHeapSize / 1024 / 1024);\n        }\n    }\n\n    recordDrawCall() {\n        this.drawCalls++;\n    }\n\n    getReport() {\n        return {\n            fps: this.fps,\n            frameTime: this.frameTime.toFixed(2),\n            drawCalls: this.drawCalls,\n            memory: this.memoryUsage\n        };\n    }\n}\n</code></pre>"},{"location":"architecture/#points-dextension","title":"\ud83d\udd27 Points d'Extension","text":""},{"location":"architecture/#ajout-de-nouvelles-api","title":"Ajout de Nouvelles API","text":"<pre><code>// Dans generateGameClass()\n// Ajouter de nouvelles fonctions \u00e0 la classe g\u00e9n\u00e9r\u00e9e\n\nplaySound(soundId) {\n    // Int\u00e9gration Web Audio API\n    if (this.emulator.audioContext) {\n        // Lecture du son\n    }\n}\n\nsaveToStorage(key, value) {\n    localStorage.setItem('KodLab_' + key, JSON.stringify(value));\n}\n\nloadFromStorage(key) {\n    const data = localStorage.getItem('KodLab_' + key);\n    return data ? JSON.parse(data) : null;\n}\n</code></pre>"},{"location":"architecture/#support-de-nouveaux-types","title":"Support de Nouveaux Types","text":"<pre><code>// Extension du syst\u00e8me de types\ncompileExpression(expr) {\n    // Support des arrays (simulation)\n    expr = expr.replace(/(\\w+)\\[(\\d+)\\]/g, 'this.$1_$2');\n\n    // Support des structures\n    expr = expr.replace(/(\\w+)\\.(\\w+)/g, 'this.$1_$2');\n\n    return expr;\n}\n</code></pre> <p>Cette architecture modulaire permet une maintenance ais\u00e9e et des extensions futures tout en gardant une complexit\u00e9 ma\u00eetris\u00e9e pour l'utilisateur final.</p> <p>Pour aller plus loin, consultez l'API de R\u00e9f\u00e9rence ! \ud83d\ude80</p>"},{"location":"exemples/","title":"\ud83c\udfae Exemples et Tutoriels - KodLab","text":"<p>Collection compl\u00e8te d'exemples de jeux avec explications d\u00e9taill\u00e9es et code comment\u00e9.</p>"},{"location":"exemples/#table-des-matieres","title":"\ud83d\udccb Table des Mati\u00e8res","text":"<ol> <li>Exemples Simples</li> <li>Jeux Complets</li> <li>Tutoriels Pas \u00e0 Pas</li> <li>Techniques Avanc\u00e9es</li> <li>D\u00e9fis et Exercices</li> </ol>"},{"location":"exemples/#exemples-simples","title":"Exemples Simples","text":""},{"location":"exemples/#1-hello-world-anime","title":"1. Hello World Anim\u00e9","text":"<p>Objectif: Premier programme avec animation simple</p> <pre><code>// Variables globales\nlet x = 0\nlet direction = 1\n\nfunction start()\n    clearScreen(\"#000033\")\n    drawText(\"KodLab initialis\u00e9!\", 100, 100, \"#FFFFFF\")\nend\n\nfunction update()\n    // Effacer l'\u00e9cran\n    clearScreen(\"#000033\")\n\n    // Animation rebond horizontal\n    x = x + (direction * 3)\n    if x &gt; 350 || x &lt; 0\n        direction = direction * -1\n    end\n\n    // Affichage\n    drawCircle(x + 25, 150, 25, \"#FF6600\")\n    drawText(\"Hello KodLab!\", x, 100, \"#FFFFFF\")\n    drawText(\"Position X: \" + x, 10, 20, \"#CCCCCC\")\nend\n</code></pre> <p>Concepts appris: - Structure de base (<code>start()</code> / <code>update()</code>) - Variables et modification - Animation simple - Rebonds et limites</p>"},{"location":"exemples/#2-controle-joueur","title":"2. Contr\u00f4le Joueur","text":"<p>Objectif: Contr\u00f4ler un objet avec le clavier</p> <pre><code>let playerX = 200\nlet playerY = 150\nlet speed = 4\n\nfunction start()\n    clearScreen(\"#001122\")\nend\n\nfunction update()\n    clearScreen(\"#001122\")\n\n    // Gestion des contr\u00f4les\n    if isKeyPressed(\"left\") &amp;&amp; playerX &gt; 20\n        playerX = playerX - speed\n    end\n    if isKeyPressed(\"right\") &amp;&amp; playerX &lt; 380\n        playerX = playerX + speed\n    end\n    if isKeyPressed(\"up\") &amp;&amp; playerY &gt; 20\n        playerY = playerY - speed\n    end\n    if isKeyPressed(\"down\") &amp;&amp; playerY &lt; 280\n        playerY = playerY + speed\n    end\n\n    // Affichage du joueur\n    drawRect(playerX - 10, playerY - 10, 20, 20, \"#00FF00\")\n\n    // Interface\n    drawText(\"Utilisez les fl\u00e8ches pour vous d\u00e9placer\", 50, 20, \"#FFFFFF\")\n    drawText(\"Position: (\" + playerX + \", \" + playerY + \")\", 10, 280, \"#CCCCCC\")\nend\n</code></pre> <p>Concepts appris: - Gestion des entr\u00e9es clavier - Limitation des mouvements - Coordonn\u00e9es et positionnement</p>"},{"location":"exemples/#25-sons-et-audio","title":"2.5. Sons et Audio","text":"<p>Objectif: D\u00e9couvrir le syst\u00e8me audio avec des effets sonores</p> <pre><code>let playerX = 200\nlet playerY = 150\nlet speed = 4\nlet soundTimer = 0\nlet noteIndex = 0\nlet melody = [\"do\", \"re\", \"mi\", \"fa\", \"sol\", \"la\", \"si\", \"do2\"]\n\nfunction start()\n    clearScreen(\"#000033\")\n    playSound(\"do\", 0.5)  // Son de d\u00e9marrage\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Contr\u00f4les avec sons de pas\n    if isKeyPressed(\"left\") &amp;&amp; playerX &gt; 20\n        playerX = playerX - speed\n        if soundTimer &lt;= 0\n            playSound(\"re\", 0.1)  // Son de pas\n            soundTimer = 10\n        end\n    end\n    if isKeyPressed(\"right\") &amp;&amp; playerX &lt; 380\n        playerX = playerX + speed\n        if soundTimer &lt;= 0\n            playSound(\"re\", 0.1)\n            soundTimer = 10\n        end\n    end\n    if isKeyPressed(\"up\") &amp;&amp; playerY &gt; 20\n        playerY = playerY - speed\n        if soundTimer &lt;= 0\n            playSound(\"mi\", 0.1)\n            soundTimer = 10\n        end\n    end\n    if isKeyPressed(\"down\") &amp;&amp; playerY &lt; 280\n        playerY = playerY + speed\n        if soundTimer &lt;= 0\n            playSound(\"mi\", 0.1)\n            soundTimer = 10\n        end\n    end\n\n    // Action sp\u00e9ciale avec m\u00e9lodie\n    if isKeyPressed(\"space\")\n        if soundTimer &lt;= 0\n            playSound(melody[noteIndex], 0.3)\n            noteIndex = noteIndex + 1\n            if noteIndex &gt;= 8\n                noteIndex = 0\n            end\n            soundTimer = 20\n        end\n    end\n\n    // D\u00e9cr\u00e9menter le timer\n    if soundTimer &gt; 0\n        soundTimer = soundTimer - 1\n    end\n\n    // Affichage\n    drawCircle(playerX, playerY, 15, \"#00FF00\")\n\n    // Interface\n    drawText(\"Sons et Mouvements\", 120, 20, \"#FFFFFF\")\n    drawText(\"Fl\u00e8ches: Se d\u00e9placer (sons de pas)\", 50, 40, \"#CCCCCC\")\n    drawText(\"Espace: Jouer m\u00e9lodie\", 50, 60, \"#CCCCCC\")\n    drawText(\"Note suivante: \" + melody[noteIndex], 50, 280, \"#FFFF00\")\nend\n</code></pre> <p>Concepts appris: - Fonction <code>playSound()</code> et notes musicales - Effets sonores contextuels (pas, actions) - Timer pour \u00e9viter la r\u00e9p\u00e9tition de sons - S\u00e9quences musicales simples</p>"},{"location":"exemples/#3-collecteur-simple","title":"3. Collecteur Simple","text":"<p>Objectif: M\u00e9caniques de base avec objectifs</p> <pre><code>let playerX = 200\nlet playerY = 150\nlet speed = 3\n\nlet coinX = 100\nlet coinY = 100\nlet score = 0\nlet collectionDistance = 30\n\nfunction start()\n    clearScreen(\"#000033\")\n    placeCoin()\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Mouvement joueur\n    if isKeyPressed(\"left\") &amp;&amp; playerX &gt; 15\n        playerX = playerX - speed\n    end\n    if isKeyPressed(\"right\") &amp;&amp; playerX &lt; 385\n        playerX = playerX + speed\n    end\n    if isKeyPressed(\"up\") &amp;&amp; playerY &gt; 15\n        playerY = playerY - speed\n    end\n    if isKeyPressed(\"down\") &amp;&amp; playerY &lt; 285\n        playerY = playerY + speed\n    end\n\n    // V\u00e9rification collision avec pi\u00e8ce\n    let dx = playerX - coinX\n    let dy = playerY - coinY\n    let distance = (dx * dx) + (dy * dy)\n\n    if distance &lt; (collectionDistance * collectionDistance)\n        score = score + 10\n        placeCoin()\n    end\n\n    // Affichage\n    drawCircle(playerX, playerY, 15, \"#00FF00\")  // Joueur\n    drawCircle(coinX, coinY, 10, \"#FFFF00\")     // Pi\u00e8ce\n\n    // Interface\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\n    drawText(\"Collectez les pi\u00e8ces jaunes!\", 10, 40, \"#CCCCCC\")\nend\n\nfunction placeCoin()\n    // Position pseudo-al\u00e9atoire bas\u00e9e sur le score\n    coinX = 30 + ((score * 7) % 340)\n    coinY = 30 + ((score * 11) % 240)\nend\n</code></pre> <p>Concepts appris: - D\u00e9tection de collision (distance) - Score et r\u00e9compenses - Placement d'objets - Fonctions personnalis\u00e9es</p>"},{"location":"exemples/#jeux-complets","title":"Jeux Complets","text":""},{"location":"exemples/#1-pong-analyse-detaillee","title":"1. Pong - Analyse D\u00e9taill\u00e9e","text":"<p>Le Pong est un excellent exemple pour apprendre les m\u00e9caniques de base :</p> <pre><code>// === VARIABLES DE JEU ===\nlet ballX = 200\nlet ballY = 150\nlet ballSpeedX = 3\nlet ballSpeedY = 2\nlet ballSize = 8\n\n// Raquette joueur (gauche)\nlet playerY = 120\nlet playerHeight = 60\nlet playerWidth = 10\nlet playerSpeed = 4\n\n// Raquette IA (droite)  \nlet aiY = 120\nlet aiHeight = 60\nlet aiWidth = 10\nlet aiSpeed = 2.5\n\n// Score\nlet playerScore = 0\nlet aiScore = 0\n\nfunction start()\n    clearScreen(\"#000000\")\n    drawText(\"PONG - Utilisez les fl\u00e8ches Haut/Bas\", 80, 30, \"#FFFFFF\")\nend\n\nfunction update()\n    clearScreen(\"#001100\")\n\n    // === CONTR\u00d4LES JOUEUR ===\n    if isKeyPressed(\"up\") &amp;&amp; playerY &gt; 0\n        playerY = playerY - playerSpeed\n    end\n    if isKeyPressed(\"down\") &amp;&amp; playerY &lt; 240\n        playerY = playerY + playerSpeed\n    end\n\n    // === IA SIMPLE ===\n    // L'IA suit la balle avec un d\u00e9lai\n    let aiCenter = aiY + (aiHeight / 2)\n    if aiCenter &lt; ballY - 10\n        aiY = aiY + aiSpeed\n    else if aiCenter &gt; ballY + 10\n        aiY = aiY - aiSpeed\n    end\n\n    // Limites IA\n    if aiY &lt; 0\n        aiY = 0\n    end\n    if aiY &gt; 240\n        aiY = 240\n    end\n\n    // === PHYSIQUE DE LA BALLE ===\n    ballX = ballX + ballSpeedX\n    ballY = ballY + ballSpeedY\n\n    // Rebonds haut/bas\n    if ballY &lt;= ballSize || ballY &gt;= 300 - ballSize\n        ballSpeedY = ballSpeedY * -1\n    end\n\n    // === COLLISIONS RAQUETTES ===\n    // Collision raquette joueur\n    if ballX &lt;= playerWidth + ballSize &amp;&amp; \n       ballY &gt;= playerY &amp;&amp; \n       ballY &lt;= playerY + playerHeight &amp;&amp;\n       ballSpeedX &lt; 0\n        ballSpeedX = ballSpeedX * -1\n        ballX = playerWidth + ballSize  // \u00c9vite que la balle reste coll\u00e9e\n    end\n\n    // Collision raquette IA\n    if ballX &gt;= 400 - aiWidth - ballSize &amp;&amp; \n       ballY &gt;= aiY &amp;&amp; \n       ballY &lt;= aiY + aiHeight &amp;&amp;\n       ballSpeedX &gt; 0\n        ballSpeedX = ballSpeedX * -1\n        ballX = 400 - aiWidth - ballSize\n    end\n\n    // === SYST\u00c8ME DE SCORE ===\n    // Point pour l'IA (balle sort \u00e0 gauche)\n    if ballX &lt; -ballSize\n        aiScore = aiScore + 1\n        resetBall()\n    end\n\n    // Point pour le joueur (balle sort \u00e0 droite)\n    if ballX &gt; 400 + ballSize\n        playerScore = playerScore + 1\n        resetBall()\n    end\n\n    // === AFFICHAGE ===\n    // Terrain\n    drawLine(200, 0, 200, 300, \"#333333\")  // Ligne centrale\n\n    // Raquettes\n    drawRect(0, playerY, playerWidth, playerHeight, \"#FFFFFF\")\n    drawRect(390, aiY, aiWidth, aiHeight, \"#FFFFFF\")\n\n    // Balle\n    drawCircle(ballX, ballY, ballSize, \"#FFFFFF\")\n\n    // Score\n    drawText(\"\" + playerScore, 180, 50, \"#FFFFFF\")\n    drawText(\"\" + aiScore, 220, 50, \"#FFFFFF\")\n\n    // Instructions\n    if playerScore == 0 &amp;&amp; aiScore == 0\n        drawText(\"Premier \u00e0 5 points gagne!\", 100, 280, \"#CCCCCC\")\n    end\n\n    // Victoire\n    if playerScore &gt;= 5\n        drawText(\"VICTOIRE JOUEUR!\", 130, 150, \"#00FF00\")\n    else if aiScore &gt;= 5\n        drawText(\"VICTOIRE IA!\", 150, 150, \"#FF0000\")\n    end\nend\n\nfunction resetBall()\n    ballX = 200\n    ballY = 150\n\n    // Direction al\u00e9atoire bas\u00e9e sur le score\n    if (playerScore + aiScore) % 2 == 0\n        ballSpeedX = 3\n    else\n        ballSpeedX = -3\n    end\n\n    ballSpeedY = 2\nend\n</code></pre> <p>Techniques importantes: - Physique simple : Vitesse constante + rebonds - IA basique : Suivre la balle avec d\u00e9lai - D\u00e9tection collision : Rectangle vs Circle - Syst\u00e8me de score : Zones de sortie - Reset d'\u00e9tat : Remise \u00e0 z\u00e9ro contr\u00f4l\u00e9e</p>"},{"location":"exemples/#2-snake-mecaniques-avancees","title":"2. Snake - M\u00e9caniques Avanc\u00e9es","text":"<pre><code>// === CONFIGURATION ===\nlet GRID_SIZE = 20\nlet GAME_WIDTH = 20   // 400 / 20 = 20 cases\nlet GAME_HEIGHT = 15  // 300 / 20 = 15 cases\n\n// Serpent (simul\u00e9 avec variables multiples)\nlet snakeLength = 3\nlet snakeX1 = 10\nlet snakeY1 = 7\nlet snakeX2 = 9\nlet snakeY2 = 7\nlet snakeX3 = 8\nlet snakeY3 = 7\n\nlet directionX = 1\nlet directionY = 0\n\nlet nextDirectionX = 1\nlet nextDirectionY = 0\n\n// Nourriture\nlet foodX = 15\nlet foodY = 10\n\n// \u00c9tat du jeu\nlet score = 0\nlet gameOver = false\nlet moveCounter = 0\nlet moveDelay = 15  // Frames entre chaque mouvement\n\nfunction start()\n    clearScreen(\"#003300\")\n    placeFoodRandomly()\nend\n\nfunction update()\n    if !gameOver\n        clearScreen(\"#003300\")\n\n        handleInput()\n        updateSnake()\n        checkCollisions()\n\n        drawGame()\n        drawUI()\n    else\n        handleGameOver()\n    end\nend\n\nfunction handleInput()\n    // Pr\u00e9vention du retour en arri\u00e8re\n    if isKeyPressed(\"up\") &amp;&amp; directionY != 1\n        nextDirectionX = 0\n        nextDirectionY = -1\n    end\n    if isKeyPressed(\"down\") &amp;&amp; directionY != -1\n        nextDirectionX = 0\n        nextDirectionY = 1\n    end\n    if isKeyPressed(\"left\") &amp;&amp; directionX != 1\n        nextDirectionX = -1\n        nextDirectionY = 0\n    end\n    if isKeyPressed(\"right\") &amp;&amp; directionX != -1\n        nextDirectionX = 1\n        nextDirectionY = 0\n    end\nend\n\nfunction updateSnake()\n    moveCounter = moveCounter + 1\n\n    if moveCounter &gt;= moveDelay\n        moveCounter = 0\n\n        // Appliquer la nouvelle direction\n        directionX = nextDirectionX\n        directionY = nextDirectionY\n\n        // Sauvegarder l'ancienne t\u00eate\n        let oldHeadX = snakeX1\n        let oldHeadY = snakeY1\n\n        // Nouvelle position de la t\u00eate\n        snakeX1 = snakeX1 + directionX\n        snakeY1 = snakeY1 + directionY\n\n        // D\u00e9placer le corps (simulation de queue)\n        if snakeLength &gt;= 3\n            snakeX3 = snakeX2\n            snakeY3 = snakeY2\n        end\n        if snakeLength &gt;= 2\n            snakeX2 = oldHeadX\n            snakeY2 = oldHeadY\n        end\n    end\nend\n\nfunction checkCollisions()\n    // Collision avec les murs\n    if snakeX1 &lt; 0 || snakeX1 &gt;= GAME_WIDTH || snakeY1 &lt; 0 || snakeY1 &gt;= GAME_HEIGHT\n        gameOver = true\n    end\n\n    // Collision avec le corps (simplifi\u00e9 pour 3 segments)\n    if snakeLength &gt;= 3\n        if snakeX1 == snakeX3 &amp;&amp; snakeY1 == snakeY3\n            gameOver = true\n        end\n    end\n\n    // Collision avec la nourriture\n    if snakeX1 == foodX &amp;&amp; snakeY1 == foodY\n        score = score + 10\n        if snakeLength &lt; 3  // Limite \u00e0 3 segments pour simplicit\u00e9\n            snakeLength = snakeLength + 1\n        end\n        placeFoodRandomly()\n\n        // Acc\u00e9l\u00e9ration progressive\n        if moveDelay &gt; 8\n            moveDelay = moveDelay - 1\n        end\n    end\nend\n\nfunction placeFoodRandomly()\n    // Placement pseudo-al\u00e9atoire bas\u00e9 sur le score\n    foodX = ((score * 7) + 13) % GAME_WIDTH\n    foodY = ((score * 11) + 17) % GAME_HEIGHT\n\n    // \u00c9viter la t\u00eate du serpent\n    if foodX == snakeX1 &amp;&amp; foodY == snakeY1\n        foodX = (foodX + 3) % GAME_WIDTH\n        foodY = (foodY + 2) % GAME_HEIGHT\n    end\nend\n\nfunction drawGame()\n    // Grille de fond (optionnelle)\n    for x = 0 to GAME_WIDTH - 1\n        drawLine(x * GRID_SIZE, 0, x * GRID_SIZE, 300, \"#006600\")\n    end\n    for y = 0 to GAME_HEIGHT - 1\n        drawLine(0, y * GRID_SIZE, 400, y * GRID_SIZE, \"#006600\")\n    end\n\n    // Serpent\n    drawRect(snakeX1 * GRID_SIZE, snakeY1 * GRID_SIZE, GRID_SIZE - 2, GRID_SIZE - 2, \"#00FF00\")  // T\u00eate\n\n    if snakeLength &gt;= 2\n        drawRect(snakeX2 * GRID_SIZE, snakeY2 * GRID_SIZE, GRID_SIZE - 2, GRID_SIZE - 2, \"#00CC00\")  // Corps\n    end\n    if snakeLength &gt;= 3\n        drawRect(snakeX3 * GRID_SIZE, snakeY3 * GRID_SIZE, GRID_SIZE - 2, GRID_SIZE - 2, \"#009900\")  // Queue\n    end\n\n    // Nourriture\n    drawCircle((foodX * GRID_SIZE) + (GRID_SIZE / 2), (foodY * GRID_SIZE) + (GRID_SIZE / 2), GRID_SIZE / 3, \"#FF0000\")\nend\n\nfunction drawUI()\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\n    drawText(\"Longueur: \" + snakeLength, 150, 20, \"#FFFFFF\")\n    drawText(\"Vitesse: \" + (20 - moveDelay), 280, 20, \"#FFFFFF\")\nend\n\nfunction handleGameOver()\n    clearScreen(\"#330000\")\n\n    drawText(\"GAME OVER\", 150, 120, \"#FF0000\")\n    drawText(\"Score Final: \" + score, 140, 140, \"#FFFFFF\")\n    drawText(\"Appuyez sur ESPACE pour rejouer\", 80, 180, \"#CCCCCC\")\n\n    if isKeyPressed(\"space\")\n        restartGame()\n    end\nend\n\nfunction restartGame()\n    // Reset toutes les variables\n    snakeLength = 3\n    snakeX1 = 10\n    snakeY1 = 7\n    snakeX2 = 9\n    snakeY2 = 7\n    snakeX3 = 8\n    snakeY3 = 7\n    directionX = 1\n    directionY = 0\n    nextDirectionX = 1\n    nextDirectionY = 0\n    score = 0\n    gameOver = false\n    moveCounter = 0\n    moveDelay = 15\n    placeFoodRandomly()\nend\n</code></pre> <p>Techniques importantes: - Mouvement temporis\u00e9 : <code>moveCounter</code> et <code>moveDelay</code> - Pr\u00e9vention retour arri\u00e8re : V\u00e9rification direction oppos\u00e9e - Simulation de queue : Variables multiples pour segments - Placement intelligent : \u00c9viter les collisions lors du spawn - Progression de difficult\u00e9 : Acc\u00e9l\u00e9ration avec le score</p>"},{"location":"exemples/#tutoriels-pas-a-pas","title":"Tutoriels Pas \u00e0 Pas","text":""},{"location":"exemples/#tutoriel-1-creer-un-casse-briques","title":"Tutoriel 1 : Cr\u00e9er un Casse-Briques","text":""},{"location":"exemples/#etape-1-structure-de-base","title":"\u00c9tape 1 : Structure de Base","text":"<pre><code>// Variables de base\nlet ballX = 200\nlet ballY = 250\nlet ballSpeedX = 3\nlet ballSpeedY = -3\nlet ballRadius = 5\n\nlet paddleX = 160\nlet paddleY = 280\nlet paddleWidth = 80\nlet paddleHeight = 10\nlet paddleSpeed = 6\n\nfunction start()\n    clearScreen(\"#000033\")\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Dessiner les \u00e9l\u00e9ments\n    drawCircle(ballX, ballY, ballRadius, \"#FFFFFF\")\n    drawRect(paddleX, paddleY, paddleWidth, paddleHeight, \"#00FF00\")\nend\n</code></pre>"},{"location":"exemples/#etape-2-mouvement-de-la-balle","title":"\u00c9tape 2 : Mouvement de la Balle","text":"<pre><code>function update()\n    clearScreen(\"#000033\")\n\n    // Mouvement de la balle\n    ballX = ballX + ballSpeedX\n    ballY = ballY + ballSpeedY\n\n    // Rebonds sur les murs\n    if ballX &lt;= ballRadius || ballX &gt;= 400 - ballRadius\n        ballSpeedX = ballSpeedX * -1\n    end\n    if ballY &lt;= ballRadius\n        ballSpeedY = ballSpeedY * -1\n    end\n\n    // Dessiner les \u00e9l\u00e9ments\n    drawCircle(ballX, ballY, ballRadius, \"#FFFFFF\")\n    drawRect(paddleX, paddleY, paddleWidth, paddleHeight, \"#00FF00\")\nend\n</code></pre>"},{"location":"exemples/#etape-3-controle-de-la-raquette","title":"\u00c9tape 3 : Contr\u00f4le de la Raquette","text":"<pre><code>function update()\n    clearScreen(\"#000033\")\n\n    // Contr\u00f4le raquette\n    if isKeyPressed(\"left\") &amp;&amp; paddleX &gt; 0\n        paddleX = paddleX - paddleSpeed\n    end\n    if isKeyPressed(\"right\") &amp;&amp; paddleX &lt; 400 - paddleWidth\n        paddleX = paddleX + paddleSpeed\n    end\n\n    // Mouvement balle + rebonds (code pr\u00e9c\u00e9dent)\n    // ...\n\n    // Collision balle-raquette\n    if ballY + ballRadius &gt;= paddleY &amp;&amp;\n       ballX &gt;= paddleX &amp;&amp;\n       ballX &lt;= paddleX + paddleWidth &amp;&amp;\n       ballSpeedY &gt; 0\n        ballSpeedY = ballSpeedY * -1\n        ballY = paddleY - ballRadius  // \u00c9viter le collage\n    end\n\n    // Dessiner les \u00e9l\u00e9ments\n    drawCircle(ballX, ballY, ballRadius, \"#FFFFFF\")\n    drawRect(paddleX, paddleY, paddleWidth, paddleHeight, \"#00FF00\")\nend\n</code></pre>"},{"location":"exemples/#etape-4-ajout-des-briques-simplifie","title":"\u00c9tape 4 : Ajout des Briques (Simplifi\u00e9)","text":"<pre><code>// Variables briques\nlet brick1X = 50\nlet brick1Y = 50\nlet brick1Active = true\n\nlet brick2X = 150\nlet brick2Y = 50\nlet brick2Active = true\n\nlet brick3X = 250\nlet brick3Y = 50\nlet brick3Active = true\n\nlet brickWidth = 80\nlet brickHeight = 20\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Code mouvement et contr\u00f4les pr\u00e9c\u00e9dent...\n\n    // Collision avec briques\n    checkBrickCollision(1)\n    checkBrickCollision(2)\n    checkBrickCollision(3)\n\n    // Dessiner briques\n    if brick1Active\n        drawRect(brick1X, brick1Y, brickWidth, brickHeight, \"#FF6600\")\n    end\n    if brick2Active\n        drawRect(brick2X, brick2Y, brickWidth, brickHeight, \"#FF6600\")\n    end\n    if brick3Active\n        drawRect(brick3X, brick3Y, brickWidth, brickHeight, \"#FF6600\")\n    end\n\n    // Dessiner balle et raquette\n    drawCircle(ballX, ballY, ballRadius, \"#FFFFFF\")\n    drawRect(paddleX, paddleY, paddleWidth, paddleHeight, \"#00FF00\")\nend\n\nfunction checkBrickCollision(brickNum)\n    let bx = 0\n    let by = 0\n    let active = false\n\n    if brickNum == 1\n        bx = brick1X\n        by = brick1Y\n        active = brick1Active\n    else if brickNum == 2\n        bx = brick2X\n        by = brick2Y\n        active = brick2Active\n    else if brickNum == 3\n        bx = brick3X\n        by = brick3Y\n        active = brick3Active\n    end\n\n    if active\n        if ballX + ballRadius &gt;= bx &amp;&amp;\n           ballX - ballRadius &lt;= bx + brickWidth &amp;&amp;\n           ballY + ballRadius &gt;= by &amp;&amp;\n           ballY - ballRadius &lt;= by + brickHeight\n\n            // D\u00e9truire la brique\n            if brickNum == 1\n                brick1Active = false\n            else if brickNum == 2\n                brick2Active = false\n            else if brickNum == 3\n                brick3Active = false\n            end\n\n            // Rebond de la balle\n            ballSpeedY = ballSpeedY * -1\n        end\n    end\nend\n</code></pre>"},{"location":"exemples/#tutoriel-2-systeme-de-particules","title":"Tutoriel 2 : Syst\u00e8me de Particules","text":""},{"location":"exemples/#objectif-creer-un-effet-dexplosion-simple","title":"Objectif : Cr\u00e9er un effet d'explosion simple","text":"<pre><code>// Syst\u00e8me de particules (maximum 5)\nlet particle1X = 0\nlet particle1Y = 0\nlet particle1VX = 0  // Vitesse X\nlet particle1VY = 0  // Vitesse Y\nlet particle1Life = 0\n\nlet particle2X = 0\nlet particle2Y = 0\nlet particle2VX = 0\nlet particle2VY = 0\nlet particle2Life = 0\n\n// ... r\u00e9p\u00e9ter pour particle3, 4, 5\n\nlet explosionX = 200\nlet explosionY = 150\n\nfunction start()\n    clearScreen(\"#000011\")\nend\n\nfunction update()\n    clearScreen(\"#000011\")\n\n    // D\u00e9clencher explosion avec espace\n    if isKeyPressed(\"space\")\n        createExplosion(explosionX, explosionY)\n\n        // Nouvelle position pour la prochaine\n        explosionX = (explosionX + 100) % 400\n        explosionY = (explosionY + 80) % 300\n    end\n\n    updateParticles()\n    drawParticles()\n\n    // Instructions\n    drawText(\"Appuyez sur ESPACE pour exploser\", 80, 20, \"#FFFFFF\")\nend\n\nfunction createExplosion(x, y)\n    // Particule 1 : vers le haut-gauche\n    if particle1Life &lt;= 0\n        particle1X = x\n        particle1Y = y\n        particle1VX = -3\n        particle1VY = -4\n        particle1Life = 40\n    end\n\n    // Particule 2 : vers le haut-droite\n    if particle2Life &lt;= 0\n        particle2X = x\n        particle2Y = y\n        particle2VX = 3\n        particle2VY = -4\n        particle2Life = 35\n    end\n\n    // Particule 3 : vers le bas-gauche\n    if particle3Life &lt;= 0\n        particle3X = x\n        particle3Y = y\n        particle3VX = -2\n        particle3VY = 2\n        particle3Life = 30\n    end\n\n    // Particule 4 : vers le bas-droite\n    if particle4Life &lt;= 0\n        particle4X = x\n        particle4Y = y\n        particle4VX = 2\n        particle4VY = 2\n        particle4Life = 32\n    end\n\n    // Particule 5 : vers le haut\n    if particle5Life &lt;= 0\n        particle5X = x\n        particle5Y = y\n        particle5VX = 0\n        particle5VY = -5\n        particle5Life = 45\n    end\nend\n\nfunction updateParticles()\n    // Particule 1\n    if particle1Life &gt; 0\n        particle1X = particle1X + particle1VX\n        particle1Y = particle1Y + particle1VY\n        particle1VY = particle1VY + 0.1  // Gravit\u00e9 l\u00e9g\u00e8re\n        particle1Life = particle1Life - 1\n    end\n\n    // Particule 2\n    if particle2Life &gt; 0\n        particle2X = particle2X + particle2VX\n        particle2Y = particle2Y + particle2VY\n        particle2VY = particle2VY + 0.1\n        particle2Life = particle2Life - 1\n    end\n\n    // R\u00e9p\u00e9ter pour toutes les particules...\nend\n\nfunction drawParticles()\n    // Particule 1 - Couleur qui \u00e9volue avec la vie\n    if particle1Life &gt; 0\n        let color = \"#FFFF00\"\n        if particle1Life &lt; 20\n            color = \"#FF6600\"  // Orange quand elle vieillit\n        end\n        if particle1Life &lt; 10\n            color = \"#FF0000\"  // Rouge \u00e0 la fin\n        end\n        drawCircle(particle1X, particle1Y, 3, color)\n    end\n\n    // Particule 2\n    if particle2Life &gt; 0\n        let color = \"#FFFF00\"\n        if particle2Life &lt; 15\n            color = \"#FF6600\"\n        end\n        if particle2Life &lt; 8\n            color = \"#FF0000\"\n        end\n        drawCircle(particle2X, particle2Y, 2, color)\n    end\n\n    // R\u00e9p\u00e9ter pour toutes les particules...\nend\n</code></pre> <p>Techniques apprises: - Physique de base : Position + vitesse + gravit\u00e9 - Gestion du cycle de vie : Cr\u00e9ation, mise \u00e0 jour, destruction - Effets visuels : Changement de couleur avec l'\u00e2ge - R\u00e9utilisation d'objets : V\u00e9rification <code>life &lt;= 0</code> avant cr\u00e9ation</p>"},{"location":"exemples/#techniques-avancees","title":"Techniques Avanc\u00e9es","text":""},{"location":"exemples/#1-machine-a-etats-complexe","title":"1. Machine \u00e0 \u00c9tats Complexe","text":"<pre><code>let gameState = \"menu\"\nlet menuSelection = 0\nlet menuOptions = 3\nlet stateTimer = 0\n\n// \u00c9tats de jeu\nlet playing = false\nlet paused = false\nlet gameOver = false\n\n// Transitions d'\u00e9tat\nlet fadeAlpha = 0\nlet transitioning = false\n\nfunction update()\n    stateTimer = stateTimer + 1\n\n    if gameState == \"menu\"\n        updateMenu()\n    else if gameState == \"fadeIn\"\n        updateFadeIn()\n    else if gameState == \"playing\"\n        updatePlaying()\n    else if gameState == \"fadeOut\"\n        updateFadeOut()\n    else if gameState == \"gameOver\"\n        updateGameOver()\n    end\nend\n\nfunction updateMenu()\n    clearScreen(\"#000033\")\n\n    // Navigation menu\n    if isKeyPressed(\"up\") &amp;&amp; stateTimer &gt; 10\n        menuSelection = menuSelection - 1\n        if menuSelection &lt; 0\n            menuSelection = menuOptions - 1\n        end\n        stateTimer = 0\n    end\n\n    if isKeyPressed(\"down\") &amp;&amp; stateTimer &gt; 10\n        menuSelection = menuSelection + 1\n        if menuSelection &gt;= menuOptions\n            menuSelection = 0\n        end\n        stateTimer = 0\n    end\n\n    // S\u00e9lection\n    if isKeyPressed(\"space\")\n        if menuSelection == 0  // Jouer\n            gameState = \"fadeIn\"\n            fadeAlpha = 0\n        else if menuSelection == 1  // Options\n            // G\u00e9rer options\n        else if menuSelection == 2  // Quitter\n            // Retour syst\u00e8me\n        end\n    end\n\n    drawMenu()\nend\n\nfunction drawMenu()\n    drawText(\"MON JEU G\u00c9NIAL\", 120, 80, \"#FFFF00\")\n\n    // Options du menu\n    let color1 = menuSelection == 0 ? \"#FFFFFF\" : \"#666666\"\n    let color2 = menuSelection == 1 ? \"#FFFFFF\" : \"#666666\"\n    let color3 = menuSelection == 2 ? \"#FFFFFF\" : \"#666666\"\n\n    drawText(\"&gt; Jouer\", 160, 130, color1)\n    drawText(\"&gt; Options\", 160, 150, color2)\n    drawText(\"&gt; Quitter\", 160, 170, color3)\n\n    // Animation curseur\n    let cursorY = 130 + (menuSelection * 20)\n    let cursorX = 140 + ((stateTimer / 10) % 4)\n    drawText(\"&gt;\", cursorX, cursorY, \"#00FF00\")\nend\n\nfunction updateFadeIn()\n    fadeAlpha = fadeAlpha + 5\n    if fadeAlpha &gt;= 100\n        gameState = \"playing\"\n        initGame()\n    end\n\n    // Dessiner transition\n    drawTransition()\nend\n\nfunction updateFadeOut()\n    fadeAlpha = fadeAlpha - 5\n    if fadeAlpha &lt;= 0\n        gameState = \"menu\"\n        resetGame()\n    end\n\n    drawTransition()\nend\n\nfunction drawTransition()\n    // Simulation d'un fade avec rectangles\n    if fadeAlpha &gt; 0\n        let alpha = fadeAlpha / 100\n        for i = 0 to 10\n            if i &lt; alpha * 10\n                drawRect(0, i * 30, 400, 30, \"#000000\")\n            end\n        end\n    end\nend\n</code></pre>"},{"location":"exemples/#2-systeme-de-collision-avance","title":"2. Syst\u00e8me de Collision Avanc\u00e9","text":"<pre><code>// Structure d'entit\u00e9 simplifi\u00e9e\nlet entity1X = 100\nlet entity1Y = 100\nlet entity1W = 20\nlet entity1H = 20\nlet entity1Type = \"player\"\n\nlet entity2X = 200\nlet entity2Y = 150\nlet entity2W = 30\nlet entity2H = 30\nlet entity2Type = \"enemy\"\n\nfunction checkAllCollisions()\n    // V\u00e9rifier collision entre entity1 et entity2\n    if checkEntityCollision(1, 2)\n        handleCollision(1, 2)\n    end\n\n    // V\u00e9rifier collisions avec les limites\n    checkBoundaryCollisions(1)\n    checkBoundaryCollisions(2)\nend\n\nfunction checkEntityCollision(id1, id2)\n    let x1, y1, w1, h1, x2, y2, w2, h2\n\n    // R\u00e9cup\u00e9rer donn\u00e9es entity1\n    if id1 == 1\n        x1 = entity1X\n        y1 = entity1Y\n        w1 = entity1W\n        h1 = entity1H\n    else if id1 == 2\n        x1 = entity2X\n        y1 = entity2Y\n        w1 = entity2W\n        h1 = entity2H\n    end\n\n    // R\u00e9cup\u00e9rer donn\u00e9es entity2\n    if id2 == 1\n        x2 = entity1X\n        y2 = entity1Y\n        w2 = entity1W\n        h2 = entity1H\n    else if id2 == 2\n        x2 = entity2X\n        y2 = entity2Y\n        w2 = entity2W\n        h2 = entity2H\n    end\n\n    // Test AABB\n    if x1 &lt; x2 + w2 &amp;&amp; x1 + w1 &gt; x2 &amp;&amp; y1 &lt; y2 + h2 &amp;&amp; y1 + h1 &gt; y2\n        return true\n    end\n    return false\nend\n\nfunction handleCollision(id1, id2)\n    // D\u00e9terminer les types\n    let type1 = \"\"\n    let type2 = \"\"\n\n    if id1 == 1\n        type1 = entity1Type\n    else if id1 == 2\n        type1 = entity2Type\n    end\n\n    if id2 == 1\n        type2 = entity1Type\n    else if id2 == 2\n        type2 = entity2Type\n    end\n\n    // Gestion selon les types\n    if (type1 == \"player\" &amp;&amp; type2 == \"enemy\") || (type1 == \"enemy\" &amp;&amp; type2 == \"player\")\n        handlePlayerEnemyCollision(id1, id2)\n    else if (type1 == \"player\" &amp;&amp; type2 == \"powerup\") || (type1 == \"powerup\" &amp;&amp; type2 == \"player\")\n        handlePlayerPowerupCollision(id1, id2)\n    end\nend\n\nfunction handlePlayerEnemyCollision(playerId, enemyId)\n    // D\u00e9g\u00e2ts au joueur\n    playerHealth = playerHealth - 10\n\n    // Push-back effect\n    if playerId == 1\n        entity1X = entity1X - 10\n    end\n\n    // Effet visuel\n    createExplosionAt(entity1X, entity1Y)\nend\n</code></pre>"},{"location":"exemples/#defis-et-exercices","title":"D\u00e9fis et Exercices","text":""},{"location":"exemples/#defi-1-pac-man-simplifie","title":"D\u00e9fi 1 : Pac-Man Simplifi\u00e9","text":"<p>Objectifs: - Cr\u00e9er un labyrinthe avec des murs - Joueur qui mange des points - Fant\u00f4mes qui suivent le joueur - Score et vies</p> <p>Contraintes KodLab: - Utiliser <code>drawRect()</code> pour les murs - Grille 20x15 (20 pixels par case) - Maximum 3 fant\u00f4mes (variables s\u00e9par\u00e9es)</p> <p>Structure sugg\u00e9r\u00e9e:</p> <pre><code>// Grille du labyrinthe (simul\u00e9e avec des conditions)\nfunction isWall(gridX, gridY)\n    // D\u00e9finir les murs avec des conditions\n    if gridX == 0 || gridX == 19 || gridY == 0 || gridY == 14\n        return true  // Bordures\n    end\n\n    // Murs int\u00e9rieurs (exemple)\n    if gridX == 5 &amp;&amp; (gridY &gt;= 3 &amp;&amp; gridY &lt;= 10)\n        return true\n    end\n\n    return false\nend\n</code></pre>"},{"location":"exemples/#defi-2-tower-defense-minimaliste","title":"D\u00e9fi 2 : Tower Defense Minimaliste","text":"<p>Objectifs: - Ennemis qui suivent un chemin - Tours qui tirent automatiquement - Ressources et construction - Vagues d'ennemis</p>"},{"location":"exemples/#defi-3-tetris-elementaire","title":"D\u00e9fi 3 : Tetris \u00c9l\u00e9mentaire","text":"<p>Objectifs: - Pi\u00e8ces qui tombent - Rotation des pi\u00e8ces - Lignes compl\u00e8tes qui disparaissent - Score progressif</p>"},{"location":"exemples/#exercices-pratiques","title":"Exercices Pratiques","text":""},{"location":"exemples/#exercice-1-ameliorer-pong","title":"Exercice 1 : Am\u00e9liorer Pong","text":"<ul> <li>Ajouter des power-ups (balle rapide, raquette plus grande)</li> <li>Effets de particules quand la balle touche</li> <li>Menus de s\u00e9lection de difficult\u00e9</li> <li>Sauvegarde du meilleur score</li> </ul>"},{"location":"exemples/#exercice-2-etendre-snake","title":"Exercice 2 : \u00c9tendre Snake","text":"<ul> <li>Obstacles sur le terrain</li> <li>Power-ups temporaires (vitesse, traverser murs)</li> <li>Plusieurs niveaux avec layouts diff\u00e9rents</li> <li>Snake qui grandit plus intelligemment</li> </ul>"},{"location":"exemples/#exercice-3-creer-asteroids","title":"Exercice 3 : Cr\u00e9er Asteroids","text":"<ul> <li>Vaisseau avec inertie</li> <li>Asteroids qui se divisent</li> <li>Soucoupes volantes ennemies</li> <li>Syst\u00e8me de vies et hyperespace</li> </ul> <p>Cette collection d'exemples et tutoriels couvre tous les aspects de la programmation de jeux avec KodLab. Commencez par les exemples simples, puis progressez vers les projets plus complexes !</p> <p>\ud83d\ude80 \u00c0 vous de jouer ! Cr\u00e9ez vos propres variations et partagez vos cr\u00e9ations !</p>"},{"location":"guide-jeux/","title":"\ud83c\udfaf Guide de Cr\u00e9ation de Jeux - KodLab","text":"<p>Ce guide vous accompagne \u00e9tape par \u00e9tape dans la cr\u00e9ation de jeux avec KodLab, du concept le plus simple aux m\u00e9caniques avanc\u00e9es.</p>"},{"location":"guide-jeux/#table-des-matieres","title":"\ud83d\udccb Table des Mati\u00e8res","text":"<ol> <li>Concepts Fondamentaux</li> <li>Votre Premier Jeu</li> <li>M\u00e9caniques de Base</li> <li>Patterns de Gameplay</li> <li>Architecture de Jeux</li> <li>Optimisation et Polish</li> <li>Projets Guid\u00e9s</li> </ol>"},{"location":"guide-jeux/#concepts-fondamentaux","title":"Concepts Fondamentaux","text":""},{"location":"guide-jeux/#la-boucle-de-jeu","title":"La Boucle de Jeu","text":"<p>Tous les jeux KodLab suivent le m\u00eame pattern :</p> <pre><code>function start()\n    // INITIALISATION (une seule fois)\n    // - Charger les ressources\n    // - D\u00e9finir les positions initiales\n    // - Configurer les param\u00e8tres\nend\n\nfunction update()\n    // BOUCLE PRINCIPALE (60 fois/seconde)\n    // 1. Effacer l'\u00e9cran\n    // 2. Traiter les entr\u00e9es\n    // 3. Mettre \u00e0 jour la logique\n    // 4. D\u00e9tecter les collisions\n    // 5. Afficher les \u00e9l\u00e9ments\n    // 6. Afficher l'interface\nend\n</code></pre>"},{"location":"guide-jeux/#systeme-de-coordonnees","title":"Syst\u00e8me de Coordonn\u00e9es","text":"<pre><code>(0,0) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 (400,0)\n  \u2502                        \u2502\n  \u2502     Canvas 400x300     \u2502\n  \u2502                        \u2502\n  \u2502                        \u2502\n(0,300) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 (400,300)\n</code></pre> <ul> <li>Origine : (0,0) en haut \u00e0 gauche</li> <li>X : augmente vers la droite</li> <li>Y : augmente vers le bas</li> <li>Limites : 0-400 en X, 0-300 en Y</li> </ul>"},{"location":"guide-jeux/#votre-premier-jeu","title":"Votre Premier Jeu","text":""},{"location":"guide-jeux/#etape-1-point-qui-bouge","title":"\u00c9tape 1 : Point qui Bouge","text":"<pre><code>let x = 200\nlet y = 150\n\nfunction start()\n    clearScreen(\"#000033\")\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Mouvement automatique\n    x = x + 2\n    if x &gt; 400\n        x = 0\n    end\n\n    // Affichage\n    drawCircle(x, y, 10, \"#FF6600\")\nend\n</code></pre>"},{"location":"guide-jeux/#etape-2-controle-joueur","title":"\u00c9tape 2 : Contr\u00f4le Joueur","text":"<pre><code>let playerX = 200\nlet playerY = 150\nlet speed = 3\n\nfunction start()\n    clearScreen(\"#000033\")\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Contr\u00f4les\n    if isKeyPressed(\"left\")\n        playerX = playerX - speed\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + speed\n    end\n    if isKeyPressed(\"up\")\n        playerY = playerY - speed\n    end\n    if isKeyPressed(\"down\")\n        playerY = playerY + speed\n    end\n\n    // Limites d'\u00e9cran\n    if playerX &lt; 10\n        playerX = 10\n    end\n    if playerX &gt; 390\n        playerX = 390\n    end\n    if playerY &lt; 10\n        playerY = 10\n    end\n    if playerY &gt; 290\n        playerY = 290\n    end\n\n    // Affichage\n    drawCircle(playerX, playerY, 10, \"#00FF00\")\nend\n</code></pre>"},{"location":"guide-jeux/#etape-3-ajouter-un-objectif","title":"\u00c9tape 3 : Ajouter un Objectif","text":"<pre><code>let playerX = 200\nlet playerY = 150\nlet speed = 3\n\nlet coinX = 100\nlet coinY = 100\nlet score = 0\n\nfunction start()\n    clearScreen(\"#000033\")\n    placeCoin()\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Mouvement joueur\n    movePlayer()\n\n    // V\u00e9rifier collision avec pi\u00e8ce\n    let distance = ((playerX - coinX) * (playerX - coinX)) + ((playerY - coinY) * (playerY - coinY))\n    if distance &lt; 400  // 20 pixels de distance\n        score = score + 10\n        placeCoin()\n    end\n\n    // Affichage\n    drawCircle(playerX, playerY, 10, \"#00FF00\")  // Joueur\n    drawCircle(coinX, coinY, 8, \"#FFFF00\")      // Pi\u00e8ce\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\nend\n\nfunction movePlayer()\n    if isKeyPressed(\"left\")\n        playerX = playerX - speed\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + speed\n    end\n    if isKeyPressed(\"up\")\n        playerY = playerY - speed\n    end\n    if isKeyPressed(\"down\")\n        playerY = playerY + speed\n    end\n\n    // Contraindre aux limites\n    if playerX &lt; 10\n        playerX = 10\n    end\n    if playerX &gt; 390\n        playerX = 390\n    end\n    if playerY &lt; 10\n        playerY = 10\n    end\n    if playerY &gt; 290\n        playerY = 290\n    end\nend\n\nfunction placeCoin()\n    coinX = 20 + ((score * 7) % 360)  // Position pseudo-al\u00e9atoire\n    coinY = 20 + ((score * 11) % 260)\nend\n</code></pre>"},{"location":"guide-jeux/#mecaniques-de-base","title":"M\u00e9caniques de Base","text":""},{"location":"guide-jeux/#1-physique-simple","title":"1. Physique Simple","text":""},{"location":"guide-jeux/#gravite-et-saut","title":"Gravit\u00e9 et Saut","text":"<pre><code>let playerX = 200\nlet playerY = 250\nlet velocityY = 0\nlet onGround = true\nlet gravity = 0.5\nlet jumpPower = -12\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Contr\u00f4les horizontaux\n    if isKeyPressed(\"left\")\n        playerX = playerX - 4\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + 4\n    end\n\n    // Saut (seulement si au sol)\n    if isKeyPressed(\"up\") &amp;&amp; onGround\n        velocityY = jumpPower\n        onGround = false\n    end\n\n    // Appliquer la gravit\u00e9\n    if !onGround\n        velocityY = velocityY + gravity\n        playerY = playerY + velocityY\n\n        // Collision avec le sol\n        if playerY &gt;= 250\n            playerY = 250\n            velocityY = 0\n            onGround = true\n        end\n    end\n\n    // Affichage\n    drawRect(playerX - 10, playerY - 20, 20, 20, \"#00FF00\")\n    drawRect(0, 270, 400, 30, \"#654321\")  // Sol\nend\n</code></pre>"},{"location":"guide-jeux/#rebonds-et-friction","title":"Rebonds et Friction","text":"<pre><code>let ballX = 200\nlet ballY = 100\nlet velocityX = 5\nlet velocityY = 3\nlet friction = 0.99\nlet bounce = 0.8\n\nfunction update()\n    clearScreen(\"#001122\")\n\n    // Mouvement\n    ballX = ballX + velocityX\n    ballY = ballY + velocityY\n\n    // Rebonds sur les bords\n    if ballX &lt;= 10 || ballX &gt;= 390\n        velocityX = velocityX * -bounce\n        ballX = ballX &lt;= 10 ? 10 : 390\n    end\n\n    if ballY &lt;= 10 || ballY &gt;= 290\n        velocityY = velocityY * -bounce\n        ballY = ballY &lt;= 10 ? 10 : 290\n    end\n\n    // Friction\n    velocityX = velocityX * friction\n    velocityY = velocityY * friction\n\n    // Affichage\n    drawCircle(ballX, ballY, 10, \"#FF6600\")\nend\n</code></pre>"},{"location":"guide-jeux/#2-detection-de-collisions","title":"2. D\u00e9tection de Collisions","text":""},{"location":"guide-jeux/#collision-rectangle-rectangle","title":"Collision Rectangle-Rectangle","text":"<pre><code>function checkRectCollision(x1, y1, w1, h1, x2, y2, w2, h2)\n    if (x1 &lt; x2 + w2) &amp;&amp; (x1 + w1 &gt; x2) &amp;&amp; (y1 &lt; y2 + h2) &amp;&amp; (y1 + h1 &gt; y2)\n        // Collision d\u00e9tect\u00e9e\n        return true\n    end\n    return false\nend\n\n// Utilisation\nlet playerCollided = checkRectCollision(playerX, playerY, 20, 20, enemyX, enemyY, 30, 30)\n</code></pre>"},{"location":"guide-jeux/#collision-cercle-cercle","title":"Collision Cercle-Cercle","text":"<pre><code>function checkCircleCollision(x1, y1, r1, x2, y2, r2)\n    let dx = x1 - x2\n    let dy = y1 - y2\n    let distance = (dx * dx) + (dy * dy)\n    let radiusSum = (r1 + r2) * (r1 + r2)\n\n    if distance &lt; radiusSum\n        return true\n    end\n    return false\nend\n</code></pre>"},{"location":"guide-jeux/#3-gestion-des-etats","title":"3. Gestion des \u00c9tats","text":""},{"location":"guide-jeux/#machine-detats-simple","title":"Machine d'\u00c9tats Simple","text":"<pre><code>let gameState = \"menu\"  // \"menu\", \"playing\", \"paused\", \"gameover\"\n\nfunction update()\n    if gameState == \"menu\"\n        handleMenu()\n    else if gameState == \"playing\"\n        handleGameplay()\n    else if gameState == \"paused\"\n        handlePause()\n    else if gameState == \"gameover\"\n        handleGameOver()\n    end\nend\n\nfunction handleMenu()\n    clearScreen(\"#000033\")\n    drawText(\"PRESS SPACE TO START\", 120, 150, \"#FFFFFF\")\n\n    if isKeyPressed(\"space\")\n        gameState = \"playing\"\n        initializeGame()\n    end\nend\n\nfunction handleGameplay()\n    updatePlayer()\n    updateEnemies()\n    checkCollisions()\n    drawGame()\n\n    if isKeyPressed(\"space\")\n        gameState = \"paused\"\n    end\nend\n\nfunction handlePause()\n    drawText(\"PAUSED - SPACE TO CONTINUE\", 100, 150, \"#FFFF00\")\n\n    if isKeyPressed(\"space\")\n        gameState = \"playing\"\n    end\nend\n</code></pre>"},{"location":"guide-jeux/#patterns-de-gameplay","title":"Patterns de Gameplay","text":""},{"location":"guide-jeux/#1-systeme-de-vies-et-sante","title":"1. Syst\u00e8me de Vies et Sant\u00e9","text":"<pre><code>let playerHealth = 100\nlet maxHealth = 100\nlet lives = 3\nlet invulnerable = false\nlet invulnerabilityTime = 0\n\nfunction takeDamage(damage)\n    if !invulnerable\n        playerHealth = playerHealth - damage\n        invulnerable = true\n        invulnerabilityTime = 60  // 1 seconde d'invuln\u00e9rabilit\u00e9\n\n        if playerHealth &lt;= 0\n            loseLife()\n        end\n    end\nend\n\nfunction loseLife()\n    lives = lives - 1\n    playerHealth = maxHealth\n\n    if lives &lt;= 0\n        gameState = \"gameover\"\n    else\n        respawnPlayer()\n    end\nend\n\nfunction updateInvulnerability()\n    if invulnerable\n        invulnerabilityTime = invulnerabilityTime - 1\n        if invulnerabilityTime &lt;= 0\n            invulnerable = false\n        end\n    end\nend\n\nfunction drawHealthBar()\n    // Barre de fond\n    drawRect(10, 10, 100, 10, \"#660000\")\n\n    // Barre de sant\u00e9\n    let healthWidth = (playerHealth * 100) / maxHealth\n    drawRect(10, 10, healthWidth, 10, \"#00FF00\")\n\n    // Contour\n    drawLine(10, 10, 110, 10, \"#FFFFFF\")\n    drawLine(10, 20, 110, 20, \"#FFFFFF\")\n    drawLine(10, 10, 10, 20, \"#FFFFFF\")\n    drawLine(110, 10, 110, 20, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"guide-jeux/#2-systeme-de-score-et-niveaux","title":"2. Syst\u00e8me de Score et Niveaux","text":"<pre><code>let score = 0\nlet level = 1\nlet levelScore = 0\nlet scoreForNextLevel = 1000\n\nfunction addScore(points)\n    score = score + points\n    levelScore = levelScore + points\n\n    // V\u00e9rifier passage au niveau suivant\n    if levelScore &gt;= scoreForNextLevel\n        levelUp()\n    end\nend\n\nfunction levelUp()\n    level = level + 1\n    levelScore = 0\n    scoreForNextLevel = scoreForNextLevel + (level * 500)\n\n    // Augmenter la difficult\u00e9\n    enemySpeed = enemySpeed + 0.5\n    enemySpawnRate = enemySpawnRate - 2\n\n    drawLevelUpMessage()\nend\n\nfunction drawLevelUpMessage()\n    drawText(\"LEVEL UP!\", 150, 150, \"#FFFF00\")\n    drawText(\"Level \" + level, 170, 170, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"guide-jeux/#3-systeme-de-power-ups","title":"3. Syst\u00e8me de Power-ups","text":"<pre><code>let hasShield = false\nlet shieldTime = 0\nlet hasRapidFire = false\nlet rapidFireTime = 0\nlet hasBigBullets = false\nlet bigBulletsTime = 0\n\nfunction collectPowerup(type)\n    if type == \"shield\"\n        hasShield = true\n        shieldTime = 600  // 10 secondes\n    else if type == \"rapidfire\"\n        hasRapidFire = true\n        rapidFireTime = 300  // 5 secondes\n    else if type == \"bigbullets\"\n        hasBigBullets = true\n        bigBulletsTime = 450  // 7.5 secondes\n    end\nend\n\nfunction updatePowerups()\n    // Bouclier\n    if hasShield\n        shieldTime = shieldTime - 1\n        if shieldTime &lt;= 0\n            hasShield = false\n        end\n    end\n\n    // Tir rapide\n    if hasRapidFire\n        rapidFireTime = rapidFireTime - 1\n        if rapidFireTime &lt;= 0\n            hasRapidFire = false\n        end\n    end\n\n    // Grosses balles\n    if hasBigBullets\n        bigBulletsTime = bigBulletsTime - 1\n        if bigBulletsTime &lt;= 0\n            hasBigBullets = false\n        end\n    end\nend\n\nfunction drawPowerupEffects()\n    // Bouclier visuel\n    if hasShield\n        drawCircle(playerX, playerY, 25, \"#0066FF\")\n    end\n\n    // Indicateurs de temps restant\n    if hasRapidFire\n        drawText(\"Rapid: \" + (rapidFireTime / 60), 10, 40, \"#FF6600\")\n    end\n    if hasBigBullets\n        drawText(\"Big: \" + (bigBulletsTime / 60), 10, 60, \"#FF00FF\")\n    end\nend\n</code></pre>"},{"location":"guide-jeux/#architecture-de-jeux","title":"Architecture de Jeux","text":""},{"location":"guide-jeux/#structure-modulaire","title":"Structure Modulaire","text":"<pre><code>// === VARIABLES GLOBALES ===\nlet gameState = \"menu\"\nlet score = 0\nlet level = 1\n\n// Variables joueur\nlet playerX = 200\nlet playerY = 250\nlet playerHealth = 100\n\n// Variables ennemis\nlet enemyCount = 0\nlet maxEnemies = 5\n\n// Variables interface\nlet showFPS = false\nlet frameCounter = 0\n\n// === FONCTION PRINCIPALE ===\nfunction start()\n    initializeGame()\nend\n\nfunction update()\n    frameCounter = frameCounter + 1\n\n    if gameState == \"menu\"\n        updateMenu()\n    else if gameState == \"playing\"\n        updateGameplay()\n    else if gameState == \"gameover\"\n        updateGameOver()\n    end\n\n    if showFPS\n        drawFPS()\n    end\nend\n\n// === GESTION DES \u00c9TATS ===\nfunction updateMenu()\n    clearScreen(\"#000033\")\n    drawMenu()\n    handleMenuInput()\nend\n\nfunction updateGameplay()\n    clearScreen(\"#001122\")\n\n    handleInput()\n    updatePlayer()\n    updateEnemies()\n    updateBullets()\n    updatePowerups()\n\n    checkCollisions()\n\n    drawBackground()\n    drawPlayer()\n    drawEnemies()\n    drawBullets()\n    drawUI()\nend\n\nfunction updateGameOver()\n    clearScreen(\"#330000\")\n    drawGameOver()\n    handleGameOverInput()\nend\n\n// === GESTION DU JOUEUR ===\nfunction updatePlayer()\n    handlePlayerMovement()\n    handlePlayerShooting()\n    updatePlayerAnimation()\n    checkPlayerBounds()\nend\n\nfunction handlePlayerMovement()\n    if isKeyPressed(\"left\")\n        playerX = playerX - 4\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + 4\n    end\nend\n\n// === GESTION DES ENNEMIS ===\nfunction updateEnemies()\n    spawnEnemies()\n    moveEnemies()\n    removeDeadEnemies()\nend\n\n// === RENDU ===\nfunction drawGame()\n    drawBackground()\n    drawPlayer()\n    drawEnemies()\n    drawBullets()\n    drawEffects()\n    drawUI()\nend\n\nfunction drawUI()\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\n    drawText(\"Level: \" + level, 10, 40, \"#FFFFFF\")\n    drawText(\"Health: \" + playerHealth, 10, 60, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"guide-jeux/#gestion-dobjets-multiples","title":"Gestion d'Objets Multiples","text":"<p>Comme Kod ne supporte pas les tableaux complexes, voici une approche alternative :</p> <pre><code>// Gestion de plusieurs ennemis avec variables individuelles\nlet enemy1X = 0\nlet enemy1Y = 0\nlet enemy1Active = false\n\nlet enemy2X = 0\nlet enemy2Y = 0\nlet enemy2Active = false\n\nlet enemy3X = 0\nlet enemy3Y = 0\nlet enemy3Active = false\n\nfunction createEnemy(slot, x, y)\n    if slot == 1\n        enemy1X = x\n        enemy1Y = y\n        enemy1Active = true\n    else if slot == 2\n        enemy2X = x\n        enemy2Y = y\n        enemy2Active = true\n    else if slot == 3\n        enemy3X = x\n        enemy3Y = y\n        enemy3Active = true\n    end\nend\n\nfunction updateAllEnemies()\n    if enemy1Active\n        updateEnemy(1)\n    end\n    if enemy2Active\n        updateEnemy(2)\n    end\n    if enemy3Active\n        updateEnemy(3)\n    end\nend\n\nfunction updateEnemy(slot)\n    if slot == 1\n        enemy1Y = enemy1Y + 2\n        if enemy1Y &gt; 300\n            enemy1Active = false\n        end\n    else if slot == 2\n        enemy2Y = enemy2Y + 2\n        if enemy2Y &gt; 300\n            enemy2Active = false\n        end\n    else if slot == 3\n        enemy3Y = enemy3Y + 2\n        if enemy3Y &gt; 300\n            enemy3Active = false\n        end\n    end\nend\n\nfunction drawAllEnemies()\n    if enemy1Active\n        drawRect(enemy1X, enemy1Y, 20, 20, \"#FF0000\")\n    end\n    if enemy2Active\n        drawRect(enemy2X, enemy2Y, 20, 20, \"#FF0000\")\n    end\n    if enemy3Active\n        drawRect(enemy3X, enemy3Y, 20, 20, \"#FF0000\")\n    end\nend\n</code></pre>"},{"location":"guide-jeux/#optimisation-et-polish","title":"Optimisation et Polish","text":""},{"location":"guide-jeux/#1-performance","title":"1. Performance","text":""},{"location":"guide-jeux/#limiter-les-calculs","title":"Limiter les Calculs","text":"<pre><code>// \u2705 Calculer une fois par frame\nlet frameCount = 0\nlet enemySpawnCounter = 0\n\nfunction update()\n    frameCount = frameCount + 1\n    enemySpawnCounter = enemySpawnCounter + 1\n\n    // Spawn ennemi toutes les 60 frames (1 seconde)\n    if enemySpawnCounter &gt;= 60\n        spawnEnemy()\n        enemySpawnCounter = 0\n    end\nend\n\n// \u274c Calcul r\u00e9p\u00e9titif \u00e9vit\u00e9\n// if frameCount % 60 == 0  // Calcul modulo chaque frame\n</code></pre>"},{"location":"guide-jeux/#optimiser-laffichage","title":"Optimiser l'Affichage","text":"<pre><code>function optimizedRender()\n    // Effacer une seule fois\n    clearScreen(\"#001122\")\n\n    // Dessiner les \u00e9l\u00e9ments par couches\n    drawBackground()      // Arri\u00e8re-plan\n    drawGameObjects()     // Objets de jeu\n    drawEffects()         // Effets visuels\n    drawUI()             // Interface utilisateur\nend\n</code></pre>"},{"location":"guide-jeux/#2-effets-visuels","title":"2. Effets Visuels","text":""},{"location":"guide-jeux/#clignotement","title":"Clignotement","text":"<pre><code>let blinkCounter = 0\n\nfunction drawBlinkingText()\n    blinkCounter = blinkCounter + 1\n\n    if (blinkCounter / 30) % 2 &lt; 1  // Change toutes les 30 frames\n        drawText(\"PRESS SPACE\", 150, 150, \"#FFFFFF\")\n    end\nend\n</code></pre>"},{"location":"guide-jeux/#animation-simple","title":"Animation Simple","text":"<pre><code>let animationFrame = 0\n\nfunction updateAnimation()\n    animationFrame = animationFrame + 1\n    if animationFrame &gt; 120\n        animationFrame = 0\n    end\nend\n\nfunction drawAnimatedPlayer()\n    let offset = 0\n    if (animationFrame / 10) % 4 &lt; 2  // Balancement\n        offset = 2\n    else\n        offset = -2\n    end\n\n    drawRect(playerX + offset, playerY, 20, 20, \"#00FF00\")\nend\n</code></pre>"},{"location":"guide-jeux/#3-feedback-utilisateur","title":"3. Feedback Utilisateur","text":""},{"location":"guide-jeux/#shake-screen-tremblement","title":"Shake Screen (Tremblement)","text":"<pre><code>let screenShake = 0\n\nfunction addScreenShake(intensity)\n    screenShake = intensity\nend\n\nfunction updateScreenShake()\n    if screenShake &gt; 0\n        screenShake = screenShake - 1\n    end\nend\n\nfunction drawWithShake(x, y, color)\n    let shakeX = 0\n    let shakeY = 0\n\n    if screenShake &gt; 0\n        shakeX = (screenShake % 4) - 2  // Tremblement al\u00e9atoire\n        shakeY = ((screenShake * 3) % 4) - 2\n    end\n\n    drawCircle(x + shakeX, y + shakeY, 10, color)\nend\n</code></pre>"},{"location":"guide-jeux/#particules-simples","title":"Particules Simples","text":"<pre><code>let particles = []\nlet particleCount = 0\n\nfunction createParticles(x, y)\n    // Cr\u00e9er 5 particules simples\n    for i = 1 to 5\n        if particleCount &lt; 10  // Maximum 10 particules\n            particleCount = particleCount + 1\n            // Utiliser variables globales pour chaque particule\n            // particleX[i], particleY[i], particleLife[i]\n        end\n    end\nend\n\nfunction updateParticles()\n    // Mettre \u00e0 jour toutes les particules actives\n    // D\u00e9cr\u00e9menter leur dur\u00e9e de vie\n    // Les supprimer quand expired\nend\n\nfunction drawParticles()\n    // Dessiner toutes les particules actives\n    for i = 1 to particleCount\n        // Dessiner chaque particule avec fade-out\n    end\nend\n</code></pre>"},{"location":"guide-jeux/#projets-guides","title":"Projets Guid\u00e9s","text":""},{"location":"guide-jeux/#projet-1-casse-briques-simplifie","title":"Projet 1 : Casse-Briques Simplifi\u00e9","text":"<pre><code>// Variables de jeu\nlet ballX = 200\nlet ballY = 250\nlet ballSpeedX = 3\nlet ballSpeedY = -3\n\nlet paddleX = 160\nlet paddleWidth = 80\nlet paddleSpeed = 6\n\nlet bricks = []\nlet brickRows = 5\nlet brickCols = 8\nlet bricksRemaining = 40\n\nlet score = 0\nlet lives = 3\n\nfunction start()\n    initializeBricks()\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    handleInput()\n    updateBall()\n    checkCollisions()\n\n    drawPaddle()\n    drawBall()\n    drawBricks()\n    drawUI()\nend\n\nfunction handleInput()\n    if isKeyPressed(\"left\") &amp;&amp; paddleX &gt; 0\n        paddleX = paddleX - paddleSpeed\n    end\n    if isKeyPressed(\"right\") &amp;&amp; paddleX &lt; 320\n        paddleX = paddleX + paddleSpeed\n    end\nend\n\nfunction updateBall()\n    ballX = ballX + ballSpeedX\n    ballY = ballY + ballSpeedY\n\n    // Rebonds sur les murs\n    if ballX &lt;= 5 || ballX &gt;= 395\n        ballSpeedX = ballSpeedX * -1\n    end\n    if ballY &lt;= 5\n        ballSpeedY = ballSpeedY * -1\n    end\n\n    // Collision avec raquette\n    if ballY &gt;= 240 &amp;&amp; ballY &lt;= 250 &amp;&amp; ballX &gt;= paddleX &amp;&amp; ballX &lt;= paddleX + paddleWidth\n        ballSpeedY = ballSpeedY * -1\n        ballY = 240  // \u00c9viter que la balle reste coll\u00e9e\n    end\n\n    // Balle perdue\n    if ballY &gt; 300\n        lives = lives - 1\n        if lives &gt; 0\n            resetBall()\n        else\n            // Game Over\n        end\n    end\nend\n\nfunction resetBall()\n    ballX = 200\n    ballY = 250\n    ballSpeedY = -3\nend\n\nfunction initializeBricks()\n    // Initialiser l'\u00e9tat des briques (toutes pr\u00e9sentes)\n    bricksRemaining = 40\nend\n\nfunction drawBricks()\n    for row = 0 to 4\n        for col = 0 to 7\n            let brickX = col * 50\n            let brickY = row * 20 + 50\n\n            // Simuler l'\u00e9tat de la brique (simplifi\u00e9)\n            let brickIndex = row * 8 + col\n            if brickIndex &lt; bricksRemaining\n                drawRect(brickX, brickY, 45, 15, \"#FF6600\")\n            end\n        end\n    end\nend\n\nfunction drawPaddle()\n    drawRect(paddleX, 250, paddleWidth, 10, \"#FFFFFF\")\nend\n\nfunction drawBall()\n    drawCircle(ballX, ballY, 5, \"#FFFF00\")\nend\n\nfunction drawUI()\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\n    drawText(\"Lives: \" + lives, 300, 20, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"guide-jeux/#projet-2-space-shooter","title":"Projet 2 : Space Shooter","text":"<pre><code>// Variables joueur\nlet playerX = 200\nlet playerY = 250\nlet playerSpeed = 5\n\n// Variables tir\nlet bulletX = 0\nlet bulletY = 0\nlet bulletActive = false\nlet bulletSpeed = 8\nlet canShoot = true\nlet shootCooldown = 0\n\n// Variables ennemis\nlet enemy1X = 50\nlet enemy1Y = 50\nlet enemy1Active = true\n\nlet enemy2X = 150\nlet enemy2Y = 80\nlet enemy2Active = true\n\nlet enemy3X = 250\nlet enemy3Y = 60\nlet enemy3Active = true\n\nlet enemySpeed = 1\nlet enemyDirection = 1\n\n// Variables de jeu\nlet score = 0\nlet gameOver = false\n\nfunction start()\n    clearScreen(\"#000011\")\nend\n\nfunction update()\n    if !gameOver\n        clearScreen(\"#000011\")\n\n        handleInput()\n        updatePlayer()\n        updateBullet()\n        updateEnemies()\n        checkCollisions()\n\n        drawStars()\n        drawPlayer()\n        drawBullet()\n        drawEnemies()\n        drawUI()\n    else\n        handleGameOver()\n    end\nend\n\nfunction handleInput()\n    if isKeyPressed(\"left\") &amp;&amp; playerX &gt; 20\n        playerX = playerX - playerSpeed\n    end\n    if isKeyPressed(\"right\") &amp;&amp; playerX &lt; 380\n        playerX = playerX + playerSpeed\n    end\n    if isKeyPressed(\"space\") &amp;&amp; canShoot &amp;&amp; !bulletActive\n        shoot()\n    end\nend\n\nfunction shoot()\n    bulletX = playerX\n    bulletY = playerY - 10\n    bulletActive = true\n    canShoot = false\n    shootCooldown = 15  // D\u00e9lai entre les tirs\nend\n\nfunction updatePlayer()\n    // Gestion du cooldown de tir\n    if shootCooldown &gt; 0\n        shootCooldown = shootCooldown - 1\n    end\n    if shootCooldown &lt;= 0\n        canShoot = true\n    end\nend\n\nfunction updateBullet()\n    if bulletActive\n        bulletY = bulletY - bulletSpeed\n        if bulletY &lt; 0\n            bulletActive = false\n        end\n    end\nend\n\nfunction updateEnemies()\n    // Mouvement en formation\n    if enemy1Active\n        enemy1X = enemy1X + (enemyDirection * enemySpeed)\n    end\n    if enemy2Active\n        enemy2X = enemy2X + (enemyDirection * enemySpeed)\n    end\n    if enemy3Active\n        enemy3X = enemy3X + (enemyDirection * enemySpeed)\n    end\n\n    // Changement de direction\n    if enemy1X &gt;= 350 || enemy2X &gt;= 350 || enemy3X &gt;= 350 || enemy1X &lt;= 50 || enemy2X &lt;= 50 || enemy3X &lt;= 50\n        enemyDirection = enemyDirection * -1\n\n        if enemy1Active\n            enemy1Y = enemy1Y + 20\n        end\n        if enemy2Active\n            enemy2Y = enemy2Y + 20\n        end\n        if enemy3Active\n            enemy3Y = enemy3Y + 20\n        end\n    end\n\n    // V\u00e9rifier si les ennemis atteignent le joueur\n    if (enemy1Active &amp;&amp; enemy1Y &gt; 220) || (enemy2Active &amp;&amp; enemy2Y &gt; 220) || (enemy3Active &amp;&amp; enemy3Y &gt; 220)\n        gameOver = true\n    end\nend\n\nfunction checkCollisions()\n    if bulletActive\n        // Collision avec ennemi 1\n        if enemy1Active &amp;&amp; bulletX &gt; enemy1X - 15 &amp;&amp; bulletX &lt; enemy1X + 15 &amp;&amp; bulletY &gt; enemy1Y - 10 &amp;&amp; bulletY &lt; enemy1Y + 10\n            enemy1Active = false\n            bulletActive = false\n            score = score + 100\n        end\n\n        // Collision avec ennemi 2\n        if enemy2Active &amp;&amp; bulletX &gt; enemy2X - 15 &amp;&amp; bulletX &lt; enemy2X + 15 &amp;&amp; bulletY &gt; enemy2Y - 10 &amp;&amp; bulletY &lt; enemy2Y + 10\n            enemy2Active = false\n            bulletActive = false\n            score = score + 100\n        end\n\n        // Collision avec ennemi 3\n        if enemy3Active &amp;&amp; bulletX &gt; enemy3X - 15 &amp;&amp; bulletX &lt; enemy3X + 15 &amp;&amp; bulletY &gt; enemy3Y - 10 &amp;&amp; bulletY &lt; enemy3Y + 10\n            enemy3Active = false\n            bulletActive = false\n            score = score + 100\n        end\n    end\n\n    // V\u00e9rifier victoire\n    if !enemy1Active &amp;&amp; !enemy2Active &amp;&amp; !enemy3Active\n        drawText(\"VICTORY!\", 150, 150, \"#00FF00\")\n    end\nend\n\nfunction drawStars()\n    // \u00c9toiles fixes simples\n    drawPixel(50, 30, \"#FFFFFF\")\n    drawPixel(150, 80, \"#FFFFFF\")\n    drawPixel(250, 45, \"#FFFFFF\")\n    drawPixel(350, 90, \"#FFFFFF\")\n    drawPixel(80, 120, \"#FFFFFF\")\n    drawPixel(300, 160, \"#FFFFFF\")\nend\n\nfunction drawPlayer()\n    // Vaisseau triangulaire\n    drawRect(playerX - 2, playerY + 5, 4, 15, \"#00FF00\")\n    drawRect(playerX - 8, playerY + 10, 16, 8, \"#00FF00\")\nend\n\nfunction drawBullet()\n    if bulletActive\n        drawRect(bulletX - 1, bulletY, 2, 8, \"#FFFF00\")\n    end\nend\n\nfunction drawEnemies()\n    if enemy1Active\n        drawRect(enemy1X - 10, enemy1Y - 5, 20, 10, \"#FF0000\")\n    end\n    if enemy2Active\n        drawRect(enemy2X - 10, enemy2Y - 5, 20, 10, \"#FF0000\")\n    end\n    if enemy3Active\n        drawRect(enemy3X - 10, enemy3Y - 5, 20, 10, \"#FF0000\")\n    end\nend\n\nfunction drawUI()\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\n    if !canShoot\n        drawText(\"Reloading...\", 300, 280, \"#FFFF00\")\n    end\nend\n\nfunction handleGameOver()\n    clearScreen(\"#330000\")\n    drawText(\"GAME OVER\", 140, 120, \"#FF0000\")\n    drawText(\"Score: \" + score, 160, 140, \"#FFFFFF\")\n    drawText(\"Press SPACE to restart\", 110, 180, \"#FFFF00\")\n\n    if isKeyPressed(\"space\")\n        restartGame()\n    end\nend\n\nfunction restartGame()\n    // Reset toutes les variables\n    playerX = 200\n    enemy1X = 50\n    enemy1Y = 50\n    enemy1Active = true\n    enemy2X = 150\n    enemy2Y = 80\n    enemy2Active = true\n    enemy3X = 250\n    enemy3Y = 60\n    enemy3Active = true\n    score = 0\n    gameOver = false\n    bulletActive = false\nend\n</code></pre>"},{"location":"guide-jeux/#conseils-de-game-design","title":"\ud83c\udfaf Conseils de Game Design","text":""},{"location":"guide-jeux/#1-commencez-simple","title":"1. Commencez Simple","text":"<ul> <li>Une m\u00e9canique \u00e0 la fois</li> <li>Prototype rapide avant de polir</li> <li>Testez fr\u00e9quemment vos id\u00e9es</li> </ul>"},{"location":"guide-jeux/#2-progression-du-joueur","title":"2. Progression du Joueur","text":"<ul> <li>Courbe d'apprentissage douce</li> <li>D\u00e9fis croissants mais justes</li> <li>Feedback imm\u00e9diat sur les actions</li> </ul>"},{"location":"guide-jeux/#3-retention-dattention","title":"3. R\u00e9tention d'Attention","text":"<ul> <li>Objectifs clairs : que doit faire le joueur ?</li> <li>R\u00e9compenses r\u00e9guli\u00e8res : points, power-ups, niveaux</li> <li>Vari\u00e9t\u00e9 : \u00e9viter la r\u00e9p\u00e9tition monotone</li> </ul>"},{"location":"guide-jeux/#4-polish-et-finition","title":"4. Polish et Finition","text":"<ul> <li>Sons : m\u00eame simples, ils ajoutent beaucoup</li> <li>Animations : fluidit\u00e9 et vie</li> <li>Interface : claire et informative</li> <li>Equilibrage : ni trop facile, ni trop dur</li> </ul> <p>Pr\u00eat \u00e0 cr\u00e9er vos propres jeux ? Explorez les Exemples Complets pour plus d'inspiration ! \ud83d\ude80</p>"},{"location":"guide-utilisation/","title":"\ud83d\udcd6 Guide d'Utilisation - KodLab","text":""},{"location":"guide-utilisation/#coloration-kod-dans-vscode-extension-officielle","title":"\ud83c\udfa8 Coloration Kod dans VSCode (Extension officielle)","text":"<p>Pour b\u00e9n\u00e9ficier de la coloration syntaxique Kod dans Visual Studio Code, vous pouvez installer l'extension officielle Kod :</p> <ul> <li>Fichier \u00e0 utiliser : <code>kod-official-0.0.1.vsix</code> (pr\u00e9sent \u00e0 la racine du projet)</li> <li>Installation :<ol> <li>Ouvrez VSCode</li> <li>Faites <code>Ctrl+Maj+P</code> puis tapez <code>Extensions: Installer depuis un fichier .VSIX</code></li> <li>S\u00e9lectionnez le fichier <code>kod-official-0.0.1.vsix</code></li> <li>Red\u00e9marrez VSCode si besoin</li> </ol> </li> <li>R\u00e9sultat : Tous vos fichiers <code>.kod</code> b\u00e9n\u00e9ficient d'une coloration syntaxique adapt\u00e9e !</li> </ul> <p>Cette extension est recommand\u00e9e pour un confort maximal lors de l'\u00e9dition de vos jeux KodLab.</p>"},{"location":"guide-utilisation/#installation-et-demarrage","title":"\ud83d\ude80 Installation et D\u00e9marrage","text":""},{"location":"guide-utilisation/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Navigateur web moderne (Chrome, Firefox, Safari, Edge)</li> <li>Aucune installation n\u00e9cessaire !</li> </ul>"},{"location":"guide-utilisation/#lancement","title":"Lancement","text":"<ol> <li>Ouvrez <code>index.html</code> dans votre navigateur</li> <li>L'interface KodLab se charge automatiquement</li> <li>Pr\u00eat \u00e0 coder ! \ud83c\udfae</li> </ol>"},{"location":"guide-utilisation/#interface-utilisateur","title":"\ud83d\udda5\ufe0f Interface Utilisateur","text":""},{"location":"guide-utilisation/#zone-principale","title":"Zone Principale","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83c\udfae KodLab                               [Exemple \u25bc] \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                 \u2502  \ud83c\udfaf Console de Jeu                    \u2502\n\u2502  \ud83d\udcdd \u00c9diteur     \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502     de Code     \u2502  \u2502                                 \u2502  \u2502\n\u2502                 \u2502  \u2502        [Canvas 400x300]        \u2502  \u2502\n\u2502                 \u2502  \u2502                                 \u2502  \u2502\n\u2502                 \u2502  \u2502     KodLab Ready            \u2502  \u2502\n\u2502                 \u2502  \u2502  Compilez et lancez votre code! \u2502  \u2502\n\u2502                 \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                 \u2502                                       \u2502\n\u2502                 \u2502  [\ud83d\udd27 Compiler]  [\u25b6\ufe0f Lancer]  [\u23f9\ufe0f Stop] \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \ud83d\udcca Console de Debug / Messages                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"guide-utilisation/#composants-de-linterface","title":"Composants de l'Interface","text":""},{"location":"guide-utilisation/#1-editeur-de-code-gauche","title":"1. \u00c9diteur de Code (Gauche)","text":"<ul> <li>Monaco Editor : Coloration syntaxique automatique</li> <li>Num\u00e9rotation : Lignes visibles</li> <li>Auto-compl\u00e9tion : Suggestions de fonctions</li> <li>D\u00e9tection d'erreurs : Soulignement des erreurs</li> </ul>"},{"location":"guide-utilisation/#2-console-de-jeu-droite","title":"2. Console de Jeu (Droite)","text":"<ul> <li>Canvas 400x300 : Zone de rendu du jeu</li> <li>Rendu temps r\u00e9el : 60 FPS par d\u00e9faut</li> <li>Gestion clavier : Touches automatiquement d\u00e9tect\u00e9es</li> </ul>"},{"location":"guide-utilisation/#3-controles","title":"3. Contr\u00f4les","text":"<ul> <li>\ud83d\udd27 Compiler : Traduit le code .kod en JavaScript</li> <li>\u25b6\ufe0f Lancer : D\u00e9marre l'ex\u00e9cution du jeu</li> <li>\u23f9\ufe0f Stop : Arr\u00eate l'ex\u00e9cution</li> </ul>"},{"location":"guide-utilisation/#4-console-de-debug","title":"4. Console de Debug","text":"<ul> <li>Messages d'erreur : Erreurs de compilation/ex\u00e9cution</li> <li>Logs du jeu : Messages de debug</li> <li>Statistiques : FPS, performances</li> </ul>"},{"location":"guide-utilisation/#workflow-de-developpement","title":"\ud83c\udfaf Workflow de D\u00e9veloppement","text":""},{"location":"guide-utilisation/#etapes-typiques","title":"\u00c9tapes Typiques","text":"<ol> <li>\u270d\ufe0f \u00c9crire le Code    ```kod    function start()        clearScreen(\"#000000\")    end</li> </ol> <p>function update()        drawText(\"Mon Premier Jeu\", 100, 150, \"#FFFFFF\")    end    ```</p> <ol> <li>\ud83d\udd27 Compiler</li> <li>Cliquez sur \"Compiler\"</li> <li>V\u00e9rifiez les messages dans la console</li> <li> <p>Corrigez les erreurs \u00e9ventuelles</p> </li> <li> <p>\u25b6\ufe0f Lancer</p> </li> <li>Cliquez sur \"Lancer\" </li> <li>Le jeu d\u00e9marre imm\u00e9diatement</li> <li> <p>Testez avec le clavier</p> </li> <li> <p>\ud83d\udd04 It\u00e9rer</p> </li> <li>Modifiez le code</li> <li>Re-compilez et re-lancez</li> <li>Perfectionnez votre jeu</li> </ol>"},{"location":"guide-utilisation/#raccourcis-clavier","title":"Raccourcis Clavier","text":"Touche Action <code>Ctrl+Enter</code> Compiler et Lancer <code>Ctrl+S</code> Sauvegarder (navigateur) <code>F5</code> Recharger la page <code>\u00c9chap</code> Arr\u00eater le jeu"},{"location":"guide-utilisation/#utilisation-de-lemulateur","title":"\ud83c\udfae Utilisation de l'\u00c9mulateur","text":""},{"location":"guide-utilisation/#canvas-de-jeu","title":"Canvas de Jeu","text":"<ul> <li>R\u00e9solution : 400x300 pixels</li> <li>Origine : (0,0) en haut \u00e0 gauche</li> <li>Coordonn\u00e9es : X vers la droite, Y vers le bas</li> </ul>"},{"location":"guide-utilisation/#gestion-des-touches","title":"Gestion des Touches","text":"<p>L'\u00e9mulateur d\u00e9tecte automatiquement : - Fl\u00e8ches : <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code> - WASD : <code>w</code>\u2192<code>up</code>, <code>s</code>\u2192<code>down</code>, <code>a</code>\u2192<code>left</code>, <code>d</code>\u2192<code>right</code> - Espace : <code>space</code></p>"},{"location":"guide-utilisation/#boucle-de-jeu","title":"Boucle de Jeu","text":"<pre><code>function start()    // Appel\u00e9e une fois au d\u00e9marrage\n    // Initialisation\nend\n\nfunction update()   // Appel\u00e9e chaque frame (60 FPS)\n    // Logique du jeu\n    // Affichage\nend\n</code></pre>"},{"location":"guide-utilisation/#gestion-des-exemples","title":"\ud83d\udcc1 Gestion des Exemples","text":""},{"location":"guide-utilisation/#charger-un-exemple","title":"Charger un Exemple","text":"<ol> <li>Cliquez sur le menu d\u00e9roulant \"Exemple\"</li> <li>S\u00e9lectionnez un jeu (Pong, Snake, Asteroids, etc.)</li> <li>Le code se charge automatiquement dans l'\u00e9diteur</li> <li>Compilez et lancez pour tester</li> </ol>"},{"location":"guide-utilisation/#exemples-disponibles","title":"Exemples Disponibles","text":"Jeu Description Niveau Pong Ping-pong avec IA \ud83d\udfe2 D\u00e9butant Snake Serpent qui grandit \ud83d\udfe1 Interm\u00e9diaire Asteroids Vaisseau spatial \ud83d\udfe0 Avanc\u00e9 Pand Adventures Plateforme 2D \ud83d\udd34 Expert"},{"location":"guide-utilisation/#modifier-les-exemples","title":"Modifier les Exemples","text":"<ul> <li>Les exemples sont des mod\u00e8les \u00e0 explorer</li> <li>Modifiez-les pour apprendre</li> <li>Cr\u00e9ez vos propres variantes</li> <li>Sauvegardez vos cr\u00e9ations localement</li> </ul>"},{"location":"guide-utilisation/#debogage-et-depannage","title":"\ud83d\udee0\ufe0f D\u00e9bogage et D\u00e9pannage","text":""},{"location":"guide-utilisation/#messages-de-compilation","title":"Messages de Compilation","text":"<pre><code>\u2705 Compilation r\u00e9ussie !\n\u274c Erreur ligne 15 : fonction 'drawCircl' inconnue\n\u26a0\ufe0f Attention : variable 'speed' non initialis\u00e9e\n</code></pre>"},{"location":"guide-utilisation/#messages-dexecution","title":"Messages d'Ex\u00e9cution","text":"<pre><code>\u25b6\ufe0f Jeu d\u00e9marr\u00e9\n\u23f8\ufe0f Jeu en pause\n\ud83d\uded1 Erreur d'ex\u00e9cution : division par z\u00e9ro\n\ud83d\udcca FPS: 60 | Objets: 42\n</code></pre>"},{"location":"guide-utilisation/#problemes-frequents","title":"Probl\u00e8mes Fr\u00e9quents","text":""},{"location":"guide-utilisation/#le-jeu-ne-se-lance-pas","title":"Le jeu ne se lance pas","text":"<ul> <li>V\u00e9rifiez la compilation (messages d'erreur)</li> <li>Assurez-vous d'avoir les fonctions <code>start()</code> et <code>update()</code></li> <li>Contr\u00f4lez la syntaxe (parenth\u00e8ses, <code>end</code>, etc.)</li> </ul>"},{"location":"guide-utilisation/#performance-lente","title":"Performance lente","text":"<ul> <li>\u00c9vitez trop de <code>drawText()</code> par frame</li> <li>Limitez les calculs complexes dans <code>update()</code></li> <li>Utilisez <code>clearScreen()</code> une seule fois par frame</li> </ul>"},{"location":"guide-utilisation/#controles-ne-fonctionnent-pas","title":"Contr\u00f4les ne fonctionnent pas","text":"<ul> <li>V\u00e9rifiez l'orthographe : <code>\"up\"</code> pas <code>\"Up\"</code></li> <li>Le canvas doit avoir le focus (cliquez dessus)</li> <li>Testez avec <code>isKeyPressed(\"space\")</code></li> </ul>"},{"location":"guide-utilisation/#sauvegarde-et-partage","title":"\ud83d\udcbe Sauvegarde et Partage","text":""},{"location":"guide-utilisation/#sauvegarde-locale","title":"Sauvegarde Locale","text":"<ul> <li>Ctrl+S : Sauvegarde navigateur (temporaire)</li> <li>Copier-coller : Sauvegardez dans un fichier .kod</li> <li>Export : Utilisez le menu du navigateur</li> </ul>"},{"location":"guide-utilisation/#partage-de-code","title":"Partage de Code","text":"<ol> <li>Copiez votre code .kod</li> <li>Partagez le fichier texte</li> <li>L'autre personne peut coller dans KodLab</li> <li>Compilation et test imm\u00e9diats</li> </ol>"},{"location":"guide-utilisation/#formats-supportes","title":"Formats Support\u00e9s","text":"<ul> <li><code>.kod</code> : Format natif KodLab</li> <li><code>.txt</code> : Texte simple (compatible)</li> <li><code>.js</code> : JavaScript g\u00e9n\u00e9r\u00e9 (lecture seule)</li> </ul>"},{"location":"guide-utilisation/#conseils-pour-debuter","title":"\ud83c\udfaf Conseils pour D\u00e9buter","text":""},{"location":"guide-utilisation/#1-commencez-simple","title":"1. Commencez Simple","text":"<pre><code>function start()\n    clearScreen(\"#003366\")\nend\n\nfunction update()\n    drawText(\"Hello World!\", 150, 150, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"guide-utilisation/#2-ajoutez-de-lanimation","title":"2. Ajoutez de l'Animation","text":"<pre><code>let x = 0\n\nfunction update()\n    clearScreen(\"#003366\")\n    x = x + 1\n    drawCircle(x, 150, 10, \"#FF0000\")\nend\n</code></pre>"},{"location":"guide-utilisation/#3-gerez-les-interactions","title":"3. G\u00e9rez les Interactions","text":"<pre><code>function update()\n    if isKeyPressed(\"space\")\n        drawText(\"SPACE press\u00e9!\", 100, 100, \"#00FF00\")\n    end\nend\n</code></pre>"},{"location":"guide-utilisation/#4-structurez-votre-code","title":"4. Structurez votre Code","text":"<ul> <li>Variables globales en haut</li> <li>Fonctions courtes et claires</li> <li>Commentaires explicatifs</li> <li>Test fr\u00e9quent</li> </ul> <p>Pr\u00eat \u00e0 cr\u00e9er ? Consultez maintenant le Guide du Langage Kod ! \ud83d\ude80</p>"},{"location":"langage-kod/","title":"\ud83e\udde0 Langage Kod - Documentation Compl\u00e8te","text":"<p>Le langage Kod est un langage de programmation simplifi\u00e9 con\u00e7u sp\u00e9cifiquement pour l'apprentissage de la programmation \u00e0 travers la cr\u00e9ation de jeux 2D.</p>"},{"location":"langage-kod/#table-des-matieres","title":"\ud83d\udccb Table des Mati\u00e8res","text":"<ol> <li>Philosophie du Langage</li> <li>Syntaxe de Base</li> <li>Variables et Types</li> <li>Structures de Contr\u00f4le</li> <li>Fonctions</li> <li>API Graphique</li> <li>Gestion des Entr\u00e9es</li> <li>Exemples Pratiques</li> <li>Bonnes Pratiques</li> </ol>"},{"location":"langage-kod/#philosophie","title":"Philosophie","text":""},{"location":"langage-kod/#quest-ce-que-kod","title":"Qu'est-ce que Kod ?","text":"<p>Kod est un langage de script inspir\u00e9 de Python, LUA et Pascal, con\u00e7u pour :</p> <p>\u2705 Simplicit\u00e9 : Syntaxe \u00e9pur\u00e9e, pas de point-virgules \u2705 Lisibilit\u00e9 : Structure claire avec <code>end</code> explicites \u2705 Accessibilit\u00e9 : Id\u00e9al pour les d\u00e9butants \u2705 Imm\u00e9diat : R\u00e9sultats visuels instantan\u00e9s \u2705 Ludique : Orient\u00e9 cr\u00e9ation de jeux  </p>"},{"location":"langage-kod/#compilation-automatique","title":"Compilation Automatique","text":"<p>Kod est transpil\u00e9 automatiquement en JavaScript ES6 :</p> <pre><code>// Code Kod\nlet speed = 5\nfunction update()\n    x = x + speed\nend\n</code></pre> <pre><code>// JavaScript g\u00e9n\u00e9r\u00e9\nclass KodGame {\n    constructor(emulator) {\n        this.speed = 5;\n    }\n\n    update() {\n        this.x = this.x + this.speed;\n    }\n}\n</code></pre>"},{"location":"langage-kod/#syntaxe-de-base","title":"Syntaxe de Base","text":""},{"location":"langage-kod/#structure-dun-programme","title":"Structure d'un Programme","text":"<pre><code>// === VARIABLES GLOBALES ===\nlet playerX = 200\nlet playerY = 150\nlet score = 0\n\n// === FONCTION DE D\u00c9MARRAGE ===\nfunction start()\n    clearScreen(\"#000033\")\n    drawText(\"Jeu d\u00e9marr\u00e9!\", 100, 50, \"#FFFFFF\")\nend\n\n// === BOUCLE PRINCIPALE ===\nfunction update()\n    // Effacer l'\u00e9cran\n    clearScreen(\"#000033\")\n\n    // Logique du jeu\n    if isKeyPressed(\"left\")\n        playerX = playerX - 3\n    end\n\n    // Affichage\n    drawCircle(playerX, playerY, 15, \"#FF6600\")\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"langage-kod/#regles-syntaxiques","title":"R\u00e8gles Syntaxiques","text":""},{"location":"langage-kod/#1-commentaires","title":"1. Commentaires","text":"<pre><code>// Commentaire sur une ligne\n// Les commentaires sont ignor\u00e9s par le compilateur\n\nlet x = 100  // Commentaire en fin de ligne\n</code></pre>"},{"location":"langage-kod/#2-casse-et-nommage","title":"2. Casse et Nommage","text":"<pre><code>// Variables : camelCase recommand\u00e9\nlet playerSpeed = 5\nlet enemyCount = 3\nlet isGameOver = false\n\n// Fonctions : camelCase obligatoire\nfunction updatePlayer()\n    // ...\nend\n\nfunction checkCollision()\n    // ...\nend\n</code></pre>"},{"location":"langage-kod/#3-indentation","title":"3. Indentation","text":"<ul> <li>Recommand\u00e9e : 4 espaces</li> <li>Flexible : Tabs accept\u00e9s</li> <li>Important : Coh\u00e9rence dans tout le code</li> </ul>"},{"location":"langage-kod/#4-blocs-de-code","title":"4. Blocs de Code","text":"<pre><code>// Toujours terminer les blocs par 'end'\nif condition\n    // instructions\nend\n\nfunction maFonction()\n    // instructions\nend\n\nfor i = 1 to 10\n    // instructions\nend\n</code></pre>"},{"location":"langage-kod/#variables-et-types","title":"Variables et Types","text":""},{"location":"langage-kod/#declaration-de-variables","title":"D\u00e9claration de Variables","text":"<pre><code>// D\u00e9claration avec valeur initiale\nlet x = 100\nlet y = 200\nlet name = \"Player\"\nlet isAlive = true\n\n// Variables num\u00e9riques\nlet speed = 2.5\nlet angle = 3.14159\nlet health = 100\n\n// Variables texte (cha\u00eenes)\nlet title = \"Mon Jeu\"\nlet message = \"Game Over\"\n\n// Variables bool\u00e9ennes\nlet gameStarted = false\nlet hasKey = true\n</code></pre>"},{"location":"langage-kod/#types-supportes","title":"Types Support\u00e9s","text":""},{"location":"langage-kod/#1-nombres","title":"1. Nombres","text":"<pre><code>let entier = 42          // Nombre entier\nlet decimal = 3.14       // Nombre d\u00e9cimal\nlet negatif = -10        // Nombre n\u00e9gatif\nlet grand = 1000000      // Grand nombre\n</code></pre>"},{"location":"langage-kod/#2-chaines-de-caracteres","title":"2. Cha\u00eenes de Caract\u00e8res","text":"<pre><code>let simple = \"Hello\"\nlet guillemets = 'World'\nlet phrase = \"Bonjour le monde!\"\nlet vide = \"\"\n\n// Concat\u00e9nation avec +\nlet complet = \"Score: \" + score\nlet coordonnees = \"Position (\" + x + \", \" + y + \")\"\n</code></pre>"},{"location":"langage-kod/#3-booleens","title":"3. Bool\u00e9ens","text":"<pre><code>let vrai = true\nlet faux = false\n\n// R\u00e9sultats de comparaisons\nlet estGrand = (x &gt; 100)\nlet estEgal = (score == 0)\n</code></pre>"},{"location":"langage-kod/#operations-sur-variables","title":"Op\u00e9rations sur Variables","text":""},{"location":"langage-kod/#arithmetiques","title":"Arithm\u00e9tiques","text":"<pre><code>let a = 10\nlet b = 3\n\nlet somme = a + b        // 13\nlet difference = a - b   // 7\nlet produit = a * b      // 30\nlet quotient = a / b     // 3.33...\nlet modulo = a % b       // 1 (reste)\n</code></pre>"},{"location":"langage-kod/#comparaisons","title":"Comparaisons","text":"<pre><code>let x = 5\nlet y = 10\n\n// \u00c9galit\u00e9\nx == y    // false\nx != y    // true\n\n// Ordre\nx &lt; y     // true\nx &gt; y     // false\nx &lt;= 5    // true\nx &gt;= 10   // false\n</code></pre>"},{"location":"langage-kod/#logiques","title":"Logiques","text":"<pre><code>let a = true\nlet b = false\n\n// ET logique\na &amp;&amp; b    // false\n\n// OU logique  \na || b    // true\n\n// NON logique\n!a        // false\n!b        // true\n</code></pre>"},{"location":"langage-kod/#structures-de-controle","title":"Structures de Contr\u00f4le","text":""},{"location":"langage-kod/#conditions-ifelse","title":"Conditions (if/else)","text":""},{"location":"langage-kod/#syntaxe-simple","title":"Syntaxe Simple","text":"<pre><code>if condition\n    // instructions si vrai\nend\n</code></pre>"},{"location":"langage-kod/#avec-alternative","title":"Avec Alternative","text":"<pre><code>if playerHealth &gt; 0\n    drawCircle(playerX, playerY, 20, \"#00FF00\")\nelse\n    drawText(\"GAME OVER\", 150, 150, \"#FF0000\")\nend\n</code></pre>"},{"location":"langage-kod/#conditions-multiples","title":"Conditions Multiples","text":"<pre><code>if score &lt; 100\n    drawText(\"D\u00e9butant\", 10, 10, \"#YELLOW\")\nelse if score &lt; 500\n    drawText(\"Interm\u00e9diaire\", 10, 10, \"#ORANGE\")\nelse if score &lt; 1000\n    drawText(\"Avanc\u00e9\", 10, 10, \"#RED\")\nelse\n    drawText(\"Expert!\", 10, 10, \"#GOLD\")\nend\n</code></pre>"},{"location":"langage-kod/#conditions-complexes","title":"Conditions Complexes","text":"<pre><code>// Plusieurs conditions avec ET\nif (playerX &gt; 0) &amp;&amp; (playerX &lt; 400) &amp;&amp; (playerY &gt; 0) &amp;&amp; (playerY &lt; 300)\n    // Joueur dans les limites\nend\n\n// Plusieurs conditions avec OU\nif isKeyPressed(\"space\") || isKeyPressed(\"enter\")\n    // Tir ou validation\nend\n\n// N\u00e9gation\nif !gameOver &amp;&amp; !isPaused\n    // Continuer le jeu\nend\n</code></pre>"},{"location":"langage-kod/#boucles","title":"Boucles","text":""},{"location":"langage-kod/#boucle-for-simple","title":"Boucle For Simple","text":"<pre><code>// Compter de 1 \u00e0 10\nfor i = 1 to 10\n    drawCircle(i * 30, 100, 10, \"#FF0000\")\nend\n</code></pre>"},{"location":"langage-kod/#boucle-for-avec-pas","title":"Boucle For avec Pas","text":"<pre><code>// Compter de 0 \u00e0 100 par pas de 10\nfor x = 0 to 100 step 10\n    drawLine(x, 0, x, 300, \"#333333\")\nend\n</code></pre>"},{"location":"langage-kod/#boucle-while","title":"Boucle While","text":"<pre><code>let x = 0\nwhile x &lt; 400\n    drawPixel(x, 150, \"#FFFFFF\")\n    x = x + 5\nend\n</code></pre>"},{"location":"langage-kod/#exemples-pratiques-de-boucles","title":"Exemples Pratiques de Boucles","text":"<pre><code>// Dessiner une grille\nfor x = 0 to 400 step 20\n    for y = 0 to 300 step 20\n        drawPixel(x, y, \"#444444\")\n    end\nend\n\n// Afficher plusieurs ennemis\nfor i = 1 to 5\n    let enemyX = i * 70\n    drawRect(enemyX, 200, 20, 20, \"#FF0000\")\nend\n\n// Animation de particules\nlet particleX = 0\nwhile particleX &lt; 400\n    drawCircle(particleX, 150, 3, \"#FFFF00\")\n    particleX = particleX + 8\nend\n</code></pre>"},{"location":"langage-kod/#fonctions","title":"Fonctions","text":""},{"location":"langage-kod/#structure-des-fonctions","title":"Structure des Fonctions","text":""},{"location":"langage-kod/#fonctions-obligatoires","title":"Fonctions Obligatoires","text":"<pre><code>function start()\n    // Appel\u00e9e UNE FOIS au d\u00e9marrage du jeu\n    // Initialisation, \u00e9cran de d\u00e9marrage\n    clearScreen(\"#000000\")\n    drawText(\"Initialisation...\", 100, 150, \"#FFFFFF\")\nend\n\nfunction update()\n    // Appel\u00e9e CHAQUE FRAME (60 fois par seconde)\n    // Logique principale du jeu\n    clearScreen(\"#000033\")\n\n    // Mise \u00e0 jour des objets\n    updatePlayer()\n    updateEnemies()\n\n    // Affichage\n    drawPlayer()\n    drawEnemies()\n    drawUI()\nend\n</code></pre>"},{"location":"langage-kod/#fonctions-personnalisees","title":"Fonctions Personnalis\u00e9es","text":"<pre><code>// Fonction sans param\u00e8tres\nfunction resetGame()\n    playerX = 200\n    playerY = 150\n    score = 0\n    gameOver = false\nend\n\n// Fonction avec logique\nfunction updatePlayer()\n    if isKeyPressed(\"left\")\n        playerX = playerX - playerSpeed\n    end\n    if isKeyPressed(\"right\") \n        playerX = playerX + playerSpeed\n    end\n\n    // Limites de l'\u00e9cran\n    if playerX &lt; 0\n        playerX = 0\n    end\n    if playerX &gt; 380\n        playerX = 380\n    end\nend\n\n// Fonction d'affichage\nfunction drawPlayer()\n    drawRect(playerX, playerY, 20, 20, \"#00FF00\")\n\n    if hasShield\n        drawCircle(playerX + 10, playerY + 10, 25, \"#0066FF\")\n    end\nend\n</code></pre>"},{"location":"langage-kod/#organisation-du-code","title":"Organisation du Code","text":""},{"location":"langage-kod/#structure-recommandee","title":"Structure Recommand\u00e9e","text":"<pre><code>// === VARIABLES GLOBALES ===\nlet playerX = 200\nlet playerY = 150\nlet enemies = []\nlet score = 0\n\n// === FONCTION PRINCIPALE ===\nfunction start()\n    initializeGame()\nend\n\nfunction update()\n    handleInput()\n    updateGame()\n    renderGame()\nend\n\n// === FONCTIONS D'INITIALISATION ===\nfunction initializeGame()\n    clearScreen(\"#001122\")\n    createEnemies()\n    showStartMessage()\nend\n\n// === FONCTIONS DE LOGIQUE ===\nfunction handleInput()\n    if isKeyPressed(\"left\")\n        movePlayerLeft()\n    end\n    if isKeyPressed(\"right\")\n        movePlayerRight()\n    end\nend\n\nfunction updateGame()\n    updatePlayer()\n    updateEnemies()\n    checkCollisions()\nend\n\n// === FONCTIONS D'AFFICHAGE ===\nfunction renderGame()\n    clearScreen(\"#001122\")\n    drawBackground()\n    drawPlayer()\n    drawEnemies()\n    drawUI()\nend\n</code></pre>"},{"location":"langage-kod/#api-graphique","title":"API Graphique","text":""},{"location":"langage-kod/#gestion-de-lecran","title":"Gestion de l'\u00c9cran","text":""},{"location":"langage-kod/#nettoyage","title":"Nettoyage","text":"<pre><code>// Effacer tout l'\u00e9cran avec une couleur\nclearScreen(\"#000000\")      // Noir\nclearScreen(\"#FFFFFF\")      // Blanc  \nclearScreen(\"#003366\")      // Bleu fonc\u00e9\nclearScreen(\"#RGB\")         // Format hexad\u00e9cimal\n</code></pre>"},{"location":"langage-kod/#formes-geometriques","title":"Formes G\u00e9om\u00e9triques","text":""},{"location":"langage-kod/#rectangles","title":"Rectangles","text":"<pre><code>// Rectangle plein\ndrawRect(x, y, width, height, color)\ndrawRect(100, 50, 80, 40, \"#FF0000\")\n\n// Exemples\ndrawRect(0, 0, 400, 20, \"#333333\")        // Barre sup\u00e9rieure\ndrawRect(playerX, playerY, 20, 20, \"#00FF00\")  // Joueur carr\u00e9\n</code></pre>"},{"location":"langage-kod/#cercles","title":"Cercles","text":"<pre><code>// Cercle plein\ndrawCircle(x, y, radius, color)\ndrawCircle(200, 150, 25, \"#FFFF00\")\n\n// Exemples  \ndrawCircle(ballX, ballY, ballRadius, \"#FFFFFF\")  // Balle\ndrawCircle(mouseX, mouseY, 5, \"#FF0000\")         // Curseur\n</code></pre>"},{"location":"langage-kod/#lignes","title":"Lignes","text":"<pre><code>// Ligne droite\ndrawLine(x1, y1, x2, y2, color)\ndrawLine(0, 150, 400, 150, \"#666666\")\n\n// Exemples\ndrawLine(0, 0, 400, 300, \"#FFFFFF\")      // Diagonale\ndrawLine(playerX, playerY, targetX, targetY, \"#FF0000\")  // Vis\u00e9e\n</code></pre>"},{"location":"langage-kod/#pixels","title":"Pixels","text":"<pre><code>// Point unique\ndrawPixel(x, y, color)\ndrawPixel(200, 150, \"#FFFFFF\")\n\n// Utile pour les effets\nfor i = 1 to 100\n    drawPixel(randomX, randomY, \"#FFFF00\")  // \u00c9toiles\nend\n</code></pre>"},{"location":"langage-kod/#texte-et-interface","title":"Texte et Interface","text":""},{"location":"langage-kod/#affichage-de-texte","title":"Affichage de Texte","text":"<pre><code>// Texte simple\ndrawText(text, x, y, color)\ndrawText(\"Score: 1250\", 10, 20, \"#FFFFFF\")\n\n// Exemples d'interface\ndrawText(\"GAME OVER\", 150, 150, \"#FF0000\")\ndrawText(\"Niveau \" + currentLevel, 10, 40, \"#FFFF00\")\ndrawText(\"Vies: \" + lives, 10, 60, \"#00FF00\")\ndrawText(\"Temps: \" + timeRemaining, 300, 20, \"#CYAN\")\n</code></pre>"},{"location":"langage-kod/#couleurs","title":"Couleurs","text":""},{"location":"langage-kod/#formats-supportes","title":"Formats Support\u00e9s","text":"<pre><code>// Hexad\u00e9cimal (recommand\u00e9)\n\"#FF0000\"    // Rouge pur\n\"#00FF00\"    // Vert pur  \n\"#0000FF\"    // Bleu pur\n\"#FFFFFF\"    // Blanc\n\"#000000\"    // Noir\n\"#808080\"    // Gris\n\n// Couleurs nomm\u00e9es (limit\u00e9es)\n\"red\"        // Rouge\n\"green\"      // Vert\n\"blue\"       // Bleu\n\"yellow\"     // Jaune\n\"white\"      // Blanc\n\"black\"      // Noir\n</code></pre>"},{"location":"langage-kod/#palette-recommandee","title":"Palette Recommand\u00e9e","text":"<pre><code>// Couleurs de jeu classiques\nlet colorBackground = \"#001122\"    // Bleu tr\u00e8s fonc\u00e9\nlet colorPlayer = \"#00FF00\"        // Vert vif\nlet colorEnemy = \"#FF0000\"         // Rouge vif\nlet colorUI = \"#FFFFFF\"           // Blanc\nlet colorPowerup = \"#FFFF00\"      // Jaune\nlet colorBorder = \"#666666\"       // Gris moyen\n</code></pre>"},{"location":"langage-kod/#sons-et-audio","title":"Sons et Audio","text":""},{"location":"langage-kod/#jouer-des-sons","title":"Jouer des Sons","text":"<pre><code>// Jouer une note musicale\nplaySound(note, dur\u00e9e)\nplaySound(\"do\", 0.3)     // Note do pendant 0.3 secondes\nplaySound(\"re\", 0.5)     // Note r\u00e9 pendant 0.5 secondes\n\n// Notes disponibles\nplaySound(\"do\", 0.2)     // Do (C4 - 261.63 Hz)\nplaySound(\"re\", 0.2)     // R\u00e9 (D4 - 293.66 Hz)  \nplaySound(\"mi\", 0.2)     // Mi (E4 - 329.63 Hz)\nplaySound(\"fa\", 0.2)     // Fa (F4 - 349.23 Hz)\nplaySound(\"sol\", 0.2)    // Sol (G4 - 392.00 Hz)\nplaySound(\"la\", 0.2)     // La (A4 - 440.00 Hz)\nplaySound(\"si\", 0.2)     // Si (B4 - 493.88 Hz)\nplaySound(\"do2\", 0.2)    // Do aigu (C5 - 523.25 Hz)\n</code></pre>"},{"location":"langage-kod/#exemples-dusage-audio","title":"Exemples d'Usage Audio","text":"<pre><code>// Effet sonore de saut\nif isKeyPressed(\"up\") &amp;&amp; onGround\n    playerY = playerY - jumpPower\n    playSound(\"do\", 0.1)  // Petit bip de saut\nend\n\n// M\u00e9lodie de victoire\nfunction playVictoryMelody()\n    playSound(\"do\", 0.2)\n    playSound(\"mi\", 0.2)  \n    playSound(\"sol\", 0.4)\nend\n\n// Son d'erreur/d\u00e9g\u00e2t\nif collision\n    playSound(\"si\", 0.1)   // Note aigue pour l'alerte\nend\n\n// S\u00e9quence musicale simple\nlet melodyStep = 0\nlet melodyNotes = [\"do\", \"re\", \"mi\", \"do\"]\n\nif frameCount % 30 == 0  // Chaque demi-seconde\n    playSound(melodyNotes[melodyStep], 0.2)\n    melodyStep = melodyStep + 1\n    if melodyStep &gt;= 4\n        melodyStep = 0\n    end\nend\n</code></pre>"},{"location":"langage-kod/#parametres-audio","title":"Param\u00e8tres Audio","text":"<pre><code>// Dur\u00e9e par d\u00e9faut : 0.2 seconde\nplaySound(\"do\")          // \u00c9quivaut \u00e0 playSound(\"do\", 0.2)\n\n// Dur\u00e9es recommand\u00e9es\nplaySound(\"do\", 0.1)     // Son court (effet)\nplaySound(\"re\", 0.3)     // Son moyen (action)\nplaySound(\"mi\", 0.5)     // Son long (m\u00e9lodie)\nplaySound(\"fa\", 1.0)     // Son tr\u00e8s long (ambiance)\n</code></pre> <p>Notes techniques : - Les sons sont g\u00e9n\u00e9r\u00e9s par oscillateur (pas de fichiers audio) - Type d'onde : <code>square</code> (son r\u00e9tro 8-bit) - Volume automatiquement ajust\u00e9 avec fade-out - N\u00e9cessite une interaction utilisateur pour initialiser l'audio</p>"},{"location":"langage-kod/#gestion-des-entrees","title":"Gestion des Entr\u00e9es","text":""},{"location":"langage-kod/#detection-des-touches","title":"D\u00e9tection des Touches","text":""},{"location":"langage-kod/#fonction-principale","title":"Fonction Principale","text":"<pre><code>isKeyPressed(keyName)   // Retourne true/false\n</code></pre>"},{"location":"langage-kod/#touches-supportees","title":"Touches Support\u00e9es","text":"<pre><code>// Fl\u00e8ches directionnelles\nisKeyPressed(\"up\")      // Fl\u00e8che Haut ou W\nisKeyPressed(\"down\")    // Fl\u00e8che Bas ou S  \nisKeyPressed(\"left\")    // Fl\u00e8che Gauche ou A\nisKeyPressed(\"right\")   // Fl\u00e8che Droite ou D\n\n// Espace\nisKeyPressed(\"space\")   // Barre d'espace\n</code></pre>"},{"location":"langage-kod/#exemples-de-controles","title":"Exemples de Contr\u00f4les","text":""},{"location":"langage-kod/#mouvement-basique","title":"Mouvement Basique","text":"<pre><code>function update()\n    // Mouvement du joueur\n    if isKeyPressed(\"left\")\n        playerX = playerX - playerSpeed\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + playerSpeed\n    end\n    if isKeyPressed(\"up\")\n        playerY = playerY - playerSpeed\n    end\n    if isKeyPressed(\"down\")\n        playerY = playerY + playerSpeed\n    end\nend\n</code></pre>"},{"location":"langage-kod/#mouvement-avec-limites","title":"Mouvement avec Limites","text":"<pre><code>function updatePlayer()\n    let oldX = playerX\n    let oldY = playerY\n\n    // Tentative de mouvement\n    if isKeyPressed(\"left\")\n        playerX = playerX - playerSpeed\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + playerSpeed\n    end\n\n    // V\u00e9rification des limites\n    if playerX &lt; 0\n        playerX = 0\n    end\n    if playerX &gt; 380  // 400 - largeur joueur (20)\n        playerX = 380\n    end\nend\n</code></pre>"},{"location":"langage-kod/#actions-speciales","title":"Actions Sp\u00e9ciales","text":"<pre><code>function handleActions()\n    // Tir avec espace\n    if isKeyPressed(\"space\")\n        if canShoot\n            createBullet(playerX + 10, playerY)\n            canShoot = false\n            shootCooldown = 10\n        end\n    end\n\n    // Gestion du cooldown\n    if shootCooldown &gt; 0\n        shootCooldown = shootCooldown - 1\n    end\n    if shootCooldown == 0\n        canShoot = true\n    end\nend\n</code></pre>"},{"location":"langage-kod/#controles-de-jeu","title":"Contr\u00f4les de Jeu","text":"<pre><code>function handleGameControls()\n    // Pause/Reprise\n    if isKeyPressed(\"space\") &amp;&amp; gameStarted &amp;&amp; !gamePaused\n        gamePaused = true\n    else if isKeyPressed(\"space\") &amp;&amp; gamePaused\n        gamePaused = false\n    end\n\n    // Red\u00e9marrage\n    if isKeyPressed(\"space\") &amp;&amp; gameOver\n        restartGame()\n    end\nend\n</code></pre>"},{"location":"langage-kod/#exemples-pratiques","title":"Exemples Pratiques","text":""},{"location":"langage-kod/#1-animation-simple","title":"1. Animation Simple","text":"<pre><code>let x = 0\nlet direction = 1\n\nfunction start()\n    clearScreen(\"#000033\")\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Animation rebond\n    x = x + (direction * 3)\n    if x &gt; 380 || x &lt; 0\n        direction = direction * -1\n    end\n\n    drawCircle(x, 150, 20, \"#FF6600\")\nend\n</code></pre>"},{"location":"langage-kod/#2-collecteur-dobjets","title":"2. Collecteur d'Objets","text":"<pre><code>let playerX = 200\nlet playerY = 250\nlet coinX = 100\nlet coinY = 100\nlet score = 0\n\nfunction start()\n    clearScreen(\"#001122\")\nend\n\nfunction update()\n    clearScreen(\"#001122\")\n\n    // Contr\u00f4les joueur\n    if isKeyPressed(\"left\")\n        playerX = playerX - 3\n    end\n    if isKeyPressed(\"right\")\n        playerX = playerX + 3\n    end\n\n    // Collision avec pi\u00e8ce\n    let distance = (playerX - coinX) * (playerX - coinX) + (playerY - coinY) * (playerY - coinY)\n    if distance &lt; 400  // 20*20 pixels de distance\n        score = score + 10\n        // Nouvelle position al\u00e9atoire pour la pi\u00e8ce\n        coinX = 50 + (score % 300)\n        coinY = 50 + ((score * 3) % 200)\n    end\n\n    // Affichage\n    drawRect(playerX - 10, playerY - 10, 20, 20, \"#00FF00\")  // Joueur\n    drawCircle(coinX, coinY, 8, \"#FFFF00\")                   // Pi\u00e8ce\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")           // Interface\nend\n</code></pre>"},{"location":"langage-kod/#3-jeu-de-tir-simple","title":"3. Jeu de Tir Simple","text":"<pre><code>let playerX = 200\nlet bullets = []\nlet enemies = []\nlet score = 0\n\nfunction start()\n    // Cr\u00e9er quelques ennemis\n    for i = 1 to 5\n        // enemies[i] sera g\u00e9r\u00e9 inline dans update()\n    end\nend\n\nfunction update()\n    clearScreen(\"#000033\")\n\n    // Contr\u00f4les joueur\n    if isKeyPressed(\"left\") &amp;&amp; playerX &gt; 0\n        playerX = playerX - 4\n    end\n    if isKeyPressed(\"right\") &amp;&amp; playerX &lt; 380\n        playerX = playerX + 4\n    end\n\n    // Tir (simplifi\u00e9 - une balle \u00e0 la fois)\n    if isKeyPressed(\"space\")\n        bulletX = playerX\n        bulletY = 280\n        bulletActive = true\n    end\n\n    // Mise \u00e0 jour balle\n    if bulletActive\n        bulletY = bulletY - 6\n        if bulletY &lt; 0\n            bulletActive = false\n        end\n        drawRect(bulletX, bulletY, 3, 8, \"#FFFFFF\")\n    end\n\n    // Ennemis simples (positions fixes)\n    for i = 1 to 5\n        let enemyX = i * 70\n        let enemyY = 50\n        drawRect(enemyX, enemyY, 20, 20, \"#FF0000\")\n\n        // Collision balle-ennemi (basique)\n        if bulletActive\n            if (bulletX &gt; enemyX - 10) &amp;&amp; (bulletX &lt; enemyX + 30) &amp;&amp; (bulletY &lt; enemyY + 20) &amp;&amp; (bulletY &gt; enemyY - 10)\n                score = score + 100\n                bulletActive = false\n                // L'ennemi \"dispara\u00eet\" temporairement\n            end\n        end\n    end\n\n    // Affichage\n    drawRect(playerX - 10, 280, 20, 20, \"#00FF00\")  // Joueur\n    drawText(\"Score: \" + score, 10, 20, \"#FFFFFF\")   // Interface\nend\n</code></pre>"},{"location":"langage-kod/#bonnes-pratiques","title":"Bonnes Pratiques","text":""},{"location":"langage-kod/#1-structure-du-code","title":"1. Structure du Code","text":""},{"location":"langage-kod/#organisation-claire","title":"Organisation Claire","text":"<pre><code>// === CONSTANTES ET CONFIGURATION ===\nlet SCREEN_WIDTH = 400\nlet SCREEN_HEIGHT = 300\nlet PLAYER_SPEED = 4\n\n// === VARIABLES DE JEU ===\nlet playerX = 200\nlet playerY = 150\nlet gameState = \"playing\"  // \"menu\", \"playing\", \"gameover\"\n\n// === FONCTIONS PRINCIPALES ===\nfunction start()\n    initializeGame()\nend\n\nfunction update()\n    if gameState == \"menu\"\n        handleMenu()\n    else if gameState == \"playing\"\n        handleGameplay()\n    else if gameState == \"gameover\"\n        handleGameOver()\n    end\nend\n\n// === FONCTIONS SP\u00c9CIALIS\u00c9ES ===\nfunction initializeGame()\n    // ...\nend\n</code></pre>"},{"location":"langage-kod/#nommage-coherent","title":"Nommage Coh\u00e9rent","text":"<pre><code>// \u2705 Bon nommage\nlet playerSpeed = 4\nlet enemyCount = 5\nlet isGameOver = false\n\nfunction updatePlayer()\n    // ...\nend\n\nfunction drawEnemies()\n    // ...\nend\n\n// \u274c Mauvais nommage\nlet s = 4           // Pas clair\nlet x1 = 5          // Pas descriptif\nlet flag = false    // Trop vague\n</code></pre>"},{"location":"langage-kod/#2-performance","title":"2. Performance","text":""},{"location":"langage-kod/#optimisation-des-rendus","title":"Optimisation des Rendus","text":"<pre><code>function update()\n    // \u2705 Effacer UNE FOIS par frame\n    clearScreen(\"#000033\")\n\n    // \u2705 Grouper les dessins similaires\n    drawBackground()\n    drawAllEnemies()\n    drawPlayer()\n    drawUI()\nend\n\n// \u274c \u00c0 \u00e9viter\nfunction update()\n    clearScreen(\"#000033\")\n    drawPlayer()\n    clearScreen(\"#000033\")  // \u274c Double effacement\n    drawEnemy()\n    clearScreen(\"#000033\")  // \u274c Triple effacement\nend\n</code></pre>"},{"location":"langage-kod/#calculs-optimises","title":"Calculs Optimis\u00e9s","text":"<pre><code>// \u2705 Calculer une fois, utiliser plusieurs fois\nlet playerCenterX = playerX + 10\nlet playerCenterY = playerY + 10\n\n// Utiliser les valeurs calcul\u00e9es\ndrawCircle(playerCenterX, playerCenterY, 15, \"#00FF00\")\ncheckCollisionWithEnemies(playerCenterX, playerCenterY)\n\n// \u274c Calculs r\u00e9p\u00e9titifs\ndrawCircle(playerX + 10, playerY + 10, 15, \"#00FF00\")\ncheckCollisionWithEnemies(playerX + 10, playerY + 10)  // Recalcule\n</code></pre>"},{"location":"langage-kod/#3-lisibilite","title":"3. Lisibilit\u00e9","text":""},{"location":"langage-kod/#commentaires-utiles","title":"Commentaires Utiles","text":"<pre><code>// === GESTION DES COLLISIONS ===\nfunction checkPlayerEnemyCollision()\n    for i = 1 to enemyCount\n        let enemyX = enemies[i].x\n        let enemyY = enemies[i].y\n\n        // Calcul de la distance euclidienne\n        let dx = playerX - enemyX\n        let dy = playerY - enemyY\n        let distance = (dx * dx) + (dy * dy)\n\n        // Collision si distance &lt; rayon combin\u00e9 au carr\u00e9\n        if distance &lt; 400  // (10+10)\u00b2 = 400\n            handlePlayerHit()\n        end\n    end\nend\n</code></pre>"},{"location":"langage-kod/#code-auto-documente","title":"Code Auto-Document\u00e9","text":"<pre><code>// \u2705 Variables explicites\nlet COLLISION_RADIUS = 20\nlet PLAYER_LIVES = 3\nlet ENEMY_SPAWN_RATE = 60  // frames entre chaque spawn\n\nif frameCount % ENEMY_SPAWN_RATE == 0\n    spawnNewEnemy()\nend\n\n// \u274c Nombres magiques\nif frameCount % 60 == 0  // Pourquoi 60 ?\n    spawnNewEnemy()\nend\n</code></pre>"},{"location":"langage-kod/#4-gestion-detat","title":"4. Gestion d'\u00c9tat","text":""},{"location":"langage-kod/#etats-de-jeu-clairs","title":"\u00c9tats de Jeu Clairs","text":"<pre><code>let gameState = \"menu\"  // \"menu\", \"playing\", \"paused\", \"gameover\"\n\nfunction update()\n    if gameState == \"menu\"\n        handleMenuInput()\n        drawMenu()\n    else if gameState == \"playing\"\n        updateGameLogic()\n        drawGame()\n    else if gameState == \"paused\"\n        handlePauseInput()\n        drawPausedGame()\n    else if gameState == \"gameover\"\n        handleGameOverInput()\n        drawGameOver()\n    end\nend\n</code></pre>"},{"location":"langage-kod/#5-debogage","title":"5. D\u00e9bogage","text":""},{"location":"langage-kod/#messages-de-debug","title":"Messages de Debug","text":"<pre><code>let DEBUG_MODE = true\n\nfunction update()\n    // Logique normale\n    updatePlayer()\n\n    // Informations de debug\n    if DEBUG_MODE\n        drawText(\"Player: (\" + playerX + \", \" + playerY + \")\", 10, 280, \"#YELLOW\")\n        drawText(\"FPS: 60\", 300, 280, \"#YELLOW\")\n        drawText(\"Enemies: \" + enemyCount, 10, 260, \"#YELLOW\")\n    end\nend\n</code></pre>"},{"location":"langage-kod/#recapitulatif","title":"\ud83c\udfaf R\u00e9capitulatif","text":"<p>Le langage Kod vous permet de cr\u00e9er facilement des jeux 2D avec :</p> <p>\u2705 Syntaxe simple : <code>if</code>/<code>end</code>, <code>function</code>/<code>end</code> \u2705 Typage automatique : Variables flexibles \u2705 API graphique : Formes, texte, couleurs \u2705 Gestion d'entr\u00e9es : Clavier int\u00e9gr\u00e9 \u2705 Boucle de jeu : <code>start()</code> et <code>update()</code> </p>"},{"location":"langage-kod/#etapes-suivantes","title":"\u00c9tapes Suivantes","text":"<ol> <li>\ud83c\udfae Explorez les Exemples Complets</li> <li>\ud83c\udfaf Suivez le Guide de Cr\u00e9ation de Jeux</li> <li>\ud83d\udd0d Consultez l'API de R\u00e9f\u00e9rence</li> </ol> <p>Bon coding avec Kod ! \ud83d\ude80</p>"},{"location":"troubleshooting/","title":"\ud83d\udee0\ufe0f D\u00e9pannage et FAQ - KodLab","text":"<p>Guide de r\u00e9solution des probl\u00e8mes les plus fr\u00e9quents avec KodLab.</p>"},{"location":"troubleshooting/#table-des-matieres","title":"\ud83d\udccb Table des Mati\u00e8res","text":"<ol> <li>Probl\u00e8mes de Compilation</li> <li>Erreurs d'Ex\u00e9cution</li> <li>Probl\u00e8mes d'Affichage</li> <li>Contr\u00f4les et Entr\u00e9es</li> <li>Performance</li> <li>FAQ G\u00e9n\u00e9rale</li> </ol>"},{"location":"troubleshooting/#problemes-de-compilation","title":"Probl\u00e8mes de Compilation","text":""},{"location":"troubleshooting/#fonction-drawcircl-inconnue","title":"\u274c \"Fonction 'drawCircl' inconnue\"","text":"<p>Cause : Faute de frappe dans le nom de fonction.</p> <p>Solution :</p> <pre><code>// \u274c Incorrect\ndrawCircl(100, 100, 20, \"#FF0000\")\n\n// \u2705 Correct\ndrawCircle(100, 100, 20, \"#FF0000\")\n</code></pre> <p>Fonctions API correctes : - <code>clearScreen()</code> - <code>drawRect()</code> - <code>drawCircle()</code> - <code>drawLine()</code> - <code>drawPixel()</code> - <code>drawText()</code> - <code>isKeyPressed()</code> - <code>playSound()</code></p>"},{"location":"troubleshooting/#erreur-ligne-x-end-attendu","title":"\u274c \"Erreur ligne X : 'end' attendu\"","text":"<p>Cause : Bloc de code non ferm\u00e9.</p> <p>Solutions :</p> <pre><code>// \u274c Manque un 'end'\nfunction update()\n    if isKeyPressed(\"space\")\n        drawText(\"Hello\", 100, 100, \"#FFFFFF\")\n    // \u274c Manque 'end' pour le if\n    drawCircle(200, 150, 20, \"#FF0000\")\nend\n\n// \u2705 Correct\nfunction update()\n    if isKeyPressed(\"space\")\n        drawText(\"Hello\", 100, 100, \"#FFFFFF\")\n    end  // \u2705 Fermeture du if\n    drawCircle(200, 150, 20, \"#FF0000\")\nend\n</code></pre> <p>V\u00e9rification syst\u00e9matique : - Chaque <code>if</code> doit avoir son <code>end</code> - Chaque <code>function</code> doit avoir son <code>end</code> - Chaque <code>for</code> doit avoir son <code>end</code> - Chaque <code>while</code> doit avoir son <code>end</code></p>"},{"location":"troubleshooting/#variable-speed-non-declaree","title":"\u274c \"Variable 'speed' non d\u00e9clar\u00e9e\"","text":"<p>Cause : Variable utilis\u00e9e sans d\u00e9claration pr\u00e9alable.</p> <p>Solution :</p> <pre><code>// \u274c Variable non d\u00e9clar\u00e9e\nfunction update()\n    playerX = playerX + speed  // \u274c 'speed' n'existe pas\nend\n\n// \u2705 D\u00e9clarer les variables au d\u00e9but\nlet speed = 5\nlet playerX = 200\n\nfunction update()\n    playerX = playerX + speed  // \u2705 'speed' est d\u00e9clar\u00e9e\nend\n</code></pre>"},{"location":"troubleshooting/#fonction-start-ou-update-manquante","title":"\u274c \"Fonction 'start' ou 'update' manquante\"","text":"<p>Cause : Les fonctions obligatoires ne sont pas d\u00e9finies.</p> <p>Solution :</p> <pre><code>// \u2705 Toujours inclure ces deux fonctions\nfunction start()\n    // Initialisation (m\u00eame vide)\n    clearScreen(\"#000033\")\nend\n\nfunction update()\n    // Boucle principale (obligatoire)\n    clearScreen(\"#000033\")\n    drawText(\"Hello World\", 100, 100, \"#FFFFFF\")\nend\n</code></pre>"},{"location":"troubleshooting/#erreurs-dexecution","title":"Erreurs d'Ex\u00e9cution","text":""},{"location":"troubleshooting/#referenceerror-xxx-is-not-defined","title":"\u274c \"ReferenceError: xxx is not defined\"","text":"<p>Cause : Acc\u00e8s \u00e0 une variable ou fonction inexistante \u00e0 l'ex\u00e9cution.</p> <p>Diagnostic : 1. V\u00e9rifiez l'orthographe exacte 2. Assurez-vous que la variable est d\u00e9clar\u00e9e avant utilisation 3. Contr\u00f4lez la port\u00e9e des variables</p> <p>Solution :</p> <pre><code>// \u274c Erreur commune\nlet playeX = 200  // \u274c Faute de frappe\n\nfunction update()\n    clearScreen(\"#000033\")\n    playerX = playerX + 5  // \u274c R\u00e9f\u00e9rence 'playerX' inexistante\nend\n\n// \u2705 Correction\nlet playerX = 200  // \u2705 Nom correct\n\nfunction update()\n    clearScreen(\"#000033\")\n    playerX = playerX + 5  // \u2705 Variable existe\nend\n</code></pre>"},{"location":"troubleshooting/#typeerror-cannot-read-property","title":"\u274c \"TypeError: Cannot read property\"","text":"<p>Cause : Tentative d'acc\u00e8s \u00e0 une propri\u00e9t\u00e9 d'un objet <code>undefined</code> ou <code>null</code>.</p> <p>Solutions courantes :</p> <pre><code>// \u274c Division par z\u00e9ro\nlet result = score / 0  // Peut causer des erreurs\n\n// \u2705 V\u00e9rification\nif divisor != 0\n    result = score / divisor\nelse\n    result = 0\nend\n\n// \u274c Calculs avec undefined\nlet distance = (playerX - enemyX) * (playerX - enemyX)  // Si enemyX pas initialis\u00e9\n\n// \u2705 Initialisation correcte\nlet enemyX = 100  // Toujours initialiser\nlet enemyY = 50\n</code></pre>"},{"location":"troubleshooting/#le-jeu-se-lance-puis-sarrete-immediatement","title":"\u274c Le jeu se lance puis s'arr\u00eate imm\u00e9diatement","text":"<p>Causes fr\u00e9quentes :</p> <ol> <li>Boucle infinie dans update() :</li> </ol> <pre><code>// \u274c Boucle infinie\nfunction update()\n    clearScreen(\"#000033\")\n\n    while true  // \u274c Bloque l'ex\u00e9cution\n        drawCircle(100, 100, 10, \"#FF0000\")\n    end\nend\n\n// \u2705 Pas de boucles infinies dans update()\nfunction update()\n    clearScreen(\"#000033\")\n    drawCircle(100, 100, 10, \"#FF0000\")\nend\n</code></pre> <ol> <li>Erreur dans start() :</li> </ol> <pre><code>// \u274c Erreur dans start\nfunction start()\n    playerX = \"abc\"  // \u274c Assigner texte \u00e0 variable num\u00e9rique\n    clearScreen(playerX)  // \u274c Couleur invalide\nend\n\n// \u2705 Types coh\u00e9rents\nfunction start()\n    playerX = 200  // \u2705 Nombre pour position\n    clearScreen(\"#000033\")  // \u2705 Couleur valide\nend\n</code></pre>"},{"location":"troubleshooting/#problemes-daffichage","title":"Probl\u00e8mes d'Affichage","text":""},{"location":"troubleshooting/#ecran-noir-rien-ne-saffiche","title":"\u274c \u00c9cran noir / Rien ne s'affiche","text":"<p>Diagnostics :</p> <ol> <li>Pas de clearScreen() :</li> </ol> <pre><code>// \u274c Pas d'effacement\nfunction update()\n    drawCircle(100, 100, 20, \"#FF0000\")  // Ne s'affiche pas bien\nend\n\n// \u2705 Toujours effacer d'abord\nfunction update()\n    clearScreen(\"#000033\")  // \u2705 Effacement obligatoire\n    drawCircle(100, 100, 20, \"#FF0000\")\nend\n</code></pre> <ol> <li>Objets hors \u00e9cran :</li> </ol> <pre><code>// \u274c Position hors limites\nlet x = -100  // \u274c N\u00e9gatif = hors \u00e9cran\nlet y = 500   // \u274c &gt; 300 = hors \u00e9cran\n\n// \u2705 Positions valides\nlet x = 200   // \u2705 Entre 0 et 400\nlet y = 150   // \u2705 Entre 0 et 300\n</code></pre> <ol> <li>Couleurs invisibles :</li> </ol> <pre><code>// \u274c Couleurs invisibles\nclearScreen(\"#000000\")  // Fond noir\ndrawCircle(100, 100, 20, \"#000000\")  // \u274c Cercle noir sur fond noir\n\n// \u2705 Contraste visible\nclearScreen(\"#000000\")  // Fond noir\ndrawCircle(100, 100, 20, \"#FFFFFF\")  // \u2705 Cercle blanc visible\n</code></pre>"},{"location":"troubleshooting/#objets-qui-laissent-des-trainees","title":"\u274c Objets qui laissent des tra\u00een\u00e9es","text":"<p>Cause : <code>clearScreen()</code> manquant ou mal plac\u00e9.</p> <p>Solution :</p> <pre><code>// \u274c Pas d'effacement = tra\u00een\u00e9es\nlet x = 0\nfunction update()\n    x = x + 5\n    drawCircle(x, 150, 20, \"#FF0000\")  // \u274c Laisse des traces\nend\n\n// \u2705 Effacer \u00e0 chaque frame\nlet x = 0\nfunction update()\n    clearScreen(\"#000033\")  // \u2705 Efface les traces\n    x = x + 5\n    drawCircle(x, 150, 20, \"#FF0000\")\nend\n</code></pre>"},{"location":"troubleshooting/#texte-ou-objets-clignotent","title":"\u274c Texte ou objets clignotent","text":"<p>Cause : Multiples <code>clearScreen()</code> ou conditions d'affichage inconsistantes.</p> <p>Solution :</p> <pre><code>// \u274c Multiple effacements\nfunction update()\n    clearScreen(\"#000033\")\n    drawPlayer()\n    clearScreen(\"#000033\")  // \u274c Efface le joueur !\n    drawEnemies()\nend\n\n// \u2705 Un seul clearScreen au d\u00e9but\nfunction update()\n    clearScreen(\"#000033\")  // \u2705 Une seule fois\n    drawPlayer()\n    drawEnemies()\nend\n</code></pre>"},{"location":"troubleshooting/#controles-et-entrees","title":"Contr\u00f4les et Entr\u00e9es","text":""},{"location":"troubleshooting/#les-touches-ne-repondent-pas","title":"\u274c Les touches ne r\u00e9pondent pas","text":"<p>Diagnostics :</p> <ol> <li>Orthographe des touches :</li> </ol> <pre><code>// \u274c Noms incorrects\nif isKeyPressed(\"Up\")      // \u274c Majuscule\nif isKeyPressed(\"SPACE\")   // \u274c Majuscules\nif isKeyPressed(\"Left\")    // \u274c Majuscule\n\n// \u2705 Noms corrects\nif isKeyPressed(\"up\")      // \u2705 Minuscules\nif isKeyPressed(\"space\")   // \u2705 Minuscules\nif isKeyPressed(\"left\")    // \u2705 Minuscules\n</code></pre> <ol> <li>Focus du canvas :</li> <li>Cliquez sur le canvas de jeu avant d'utiliser le clavier</li> <li> <p>Le navigateur doit avoir le focus sur la page</p> </li> <li> <p>Touches support\u00e9es uniquement :</p> </li> </ol> <pre><code>// \u2705 Touches disponibles\n\"up\", \"down\", \"left\", \"right\"  // Fl\u00e8ches + WASD\n\"space\"                        // Barre d'espace\n\n// \u274c Touches non support\u00e9es\n\"enter\", \"ctrl\", \"shift\", \"a\", \"b\", etc.\n</code></pre>"},{"location":"troubleshooting/#mouvement-trop-rapide-ou-saccade","title":"\u274c Mouvement trop rapide ou saccad\u00e9","text":"<p>Cause : Vitesse inadapt\u00e9e au framerate (60 FPS).</p> <p>Solution :</p> <pre><code>// \u274c Mouvement trop rapide\nlet speed = 50  // \u274c 50 pixels par frame = tr\u00e8s rapide\n\nif isKeyPressed(\"right\")\n    playerX = playerX + speed\nend\n\n// \u2705 Vitesse adapt\u00e9e\nlet speed = 3   // \u2705 3 pixels par frame = fluide\n\nif isKeyPressed(\"right\")\n    playerX = playerX + speed\nend\n</code></pre>"},{"location":"troubleshooting/#impossible-darreter-le-mouvement","title":"\u274c Impossible d'arr\u00eater le mouvement","text":"<p>Cause : Logique de mouvement continue m\u00eame sans appui.</p> <p>Solution :</p> <pre><code>// \u274c Mouvement automatique\nlet velocity = 5\nfunction update()\n    playerX = playerX + velocity  // \u274c Toujours en mouvement\nend\n\n// \u2705 Mouvement conditionnel\nfunction update()\n    if isKeyPressed(\"right\")\n        playerX = playerX + 5\n    end\n    // \u2705 Pas de mouvement si pas d'appui\nend\n</code></pre>"},{"location":"troubleshooting/#performance","title":"Performance","text":""},{"location":"troubleshooting/#jeu-lent-saccade","title":"\u274c Jeu lent / saccad\u00e9","text":"<p>Causes et solutions :</p> <ol> <li>Trop de calculs dans update() :</li> </ol> <pre><code>// \u274c Calculs lourds r\u00e9p\u00e9t\u00e9s\nfunction update()\n    for i = 1 to 1000  // \u274c Boucle trop lourde\n        for j = 1 to 1000\n            drawPixel(i, j, \"#FF0000\")\n        end\n    end\nend\n\n// \u2705 Calculs optimis\u00e9s\nfunction update()\n    clearScreen(\"#000033\")\n    for i = 1 to 50  // \u2705 Boucle raisonnable\n        drawCircle(i * 8, 150, 3, \"#FF0000\")\n    end\nend\n</code></pre> <ol> <li>Trop d'\u00e9l\u00e9ments graphiques :</li> </ol> <pre><code>// \u274c Trop d'objets dessin\u00e9s\nfunction update()\n    clearScreen(\"#000033\")\n    for i = 1 to 500  // \u274c 500 cercles par frame\n        drawCircle(i, 100, 5, \"#FF0000\")\n    end\nend\n\n// \u2705 Nombre raisonnable\nfunction update()\n    clearScreen(\"#000033\")\n    for i = 1 to 20   // \u2705 20 cercles suffisent\n        drawCircle(i * 20, 100, 5, \"#FF0000\")\n    end\nend\n</code></pre>"},{"location":"troubleshooting/#memoire-qui-augmente-fuite-memoire","title":"\u274c M\u00e9moire qui augmente (fuite m\u00e9moire)","text":"<p>Cause : Variables qui s'accumulent sans nettoyage.</p> <p>Pr\u00e9vention :</p> <pre><code>// \u2705 R\u00e9utiliser les variables\nlet tempX = 0\nlet tempY = 0\n\nfunction update()\n    // R\u00e9utiliser tempX, tempY au lieu de cr\u00e9er nouvelles variables\n    tempX = playerX + 10\n    tempY = playerY + 5\n    drawCircle(tempX, tempY, 10, \"#FF0000\")\nend\n</code></pre>"},{"location":"troubleshooting/#faq-generale","title":"FAQ G\u00e9n\u00e9rale","text":""},{"location":"troubleshooting/#pourquoi-mon-jeu-ne-se-sauvegarde-pas","title":"\u2753 Pourquoi mon jeu ne se sauvegarde pas ?","text":"<p>R\u00e9ponse : KodLab fonctionne dans le navigateur sans sauvegarde automatique.</p> <p>Solutions : - Ctrl+S dans l'\u00e9diteur (sauvegarde temporaire navigateur) - Copier-coller le code dans un fichier <code>.kod</code>  - Bookmarks pour sauvegarder l'\u00e9tat de l'\u00e9diteur</p>"},{"location":"troubleshooting/#puis-je-utiliser-des-images","title":"\u2753 Puis-je utiliser des images ?","text":"<p>R\u00e9ponse : Non, KodLab ne supporte que les formes g\u00e9om\u00e9triques et le texte.</p> <p>Alternatives cr\u00e9atives :</p> <pre><code>// Cr\u00e9er des sprites avec des rectangles\nfunction drawPlayer()\n    drawRect(playerX, playerY, 20, 20, \"#00FF00\")     // Corps\n    drawRect(playerX + 5, playerY - 5, 10, 5, \"#FFDDAA\")  // T\u00eate\n    drawCircle(playerX + 7, playerY - 3, 1, \"#000000\")     // \u0152il gauche\n    drawCircle(playerX + 13, playerY - 3, 1, \"#000000\")    // \u0152il droit\nend\n</code></pre>"},{"location":"troubleshooting/#les-sons-ne-fonctionnent-pas","title":"\u2753 Les sons ne fonctionnent pas ?","text":"<p>Causes possibles :</p> <ol> <li>Navigateur non compatible :</li> <li>Utilisez Chrome, Firefox, Safari ou Edge r\u00e9cents</li> <li> <p>V\u00e9rifiez que Web Audio API est support\u00e9</p> </li> <li> <p>Interaction utilisateur manquante :</p> </li> <li>L'audio n\u00e9cessite un clic utilisateur pour s'initialiser</li> <li> <p>Cliquez une fois sur la page avant de lancer le jeu</p> </li> <li> <p>Volume syst\u00e8me :</p> </li> <li>V\u00e9rifiez que le volume n'est pas coup\u00e9</li> <li> <p>Testez avec d'autres sites audio</p> </li> <li> <p>Note invalide :</p> </li> </ol> <pre><code>// \u274c Notes incorrectes\nplaySound(\"do#\", 0.2)    // Di\u00e8ses non support\u00e9s\nplaySound(\"DO\", 0.2)     // Majuscules non support\u00e9es\nplaySound(\"c\", 0.2)      // Notation anglaise non support\u00e9e\n\n// \u2705 Notes correctes\nplaySound(\"do\", 0.2)     // Notes fran\u00e7aises minuscules\nplaySound(\"re\", 0.2)\nplaySound(\"mi\", 0.2)\n</code></pre> <p>Solutions : - Testez l'exemple \"Piano Virtuel\" pour v\u00e9rifier l'audio - Red\u00e9marrez le navigateur si n\u00e9cessaire - Utilisez des dur\u00e9es entre 0.1 et 2.0 secondes</p>"},{"location":"troubleshooting/#comment-faire-des-niveaux-multiples","title":"\u2753 Comment faire des niveaux multiples ?","text":"<p>R\u00e9ponse : Utiliser des variables d'\u00e9tat et des conditions.</p> <p>Exemple :</p> <pre><code>let currentLevel = 1\nlet levelCompleted = false\n\nfunction update()\n    if currentLevel == 1\n        updateLevel1()\n    else if currentLevel == 2\n        updateLevel2()\n    else if currentLevel == 3\n        updateLevel3()\n    end\n\n    if levelCompleted\n        currentLevel = currentLevel + 1\n        levelCompleted = false\n        initializeLevel()\n    end\nend\n</code></pre>"},{"location":"troubleshooting/#peut-on-jouer-a-plusieurs","title":"\u2753 Peut-on jouer \u00e0 plusieurs ?","text":"<p>R\u00e9ponse : Pas de multijoueur r\u00e9seau, mais possible en local.</p> <p>Exemple 2 joueurs :</p> <pre><code>// Joueur 1 : Fl\u00e8ches\nif isKeyPressed(\"up\")\n    player1Y = player1Y - speed\nend\n\n// Joueur 2 : WASD (si support\u00e9 par le navigateur)\n// Sinon, utiliser des touches altern\u00e9es\nif isKeyPressed(\"space\")  // Action joueur 2\n    player2Action()\nend\n</code></pre>"},{"location":"troubleshooting/#comment-deboguer-mon-code","title":"\u2753 Comment d\u00e9boguer mon code ?","text":"<p>Techniques de debug :</p> <ol> <li>Affichage des variables :</li> </ol> <pre><code>function update()\n    clearScreen(\"#000033\")\n\n    // Debug : afficher les valeurs\n    drawText(\"PlayerX: \" + playerX, 10, 20, \"#FFFF00\")\n    drawText(\"PlayerY: \" + playerY, 10, 40, \"#FFFF00\")\n    drawText(\"Speed: \" + speed, 10, 60, \"#FFFF00\")\nend\n</code></pre> <ol> <li>Messages de progression :</li> </ol> <pre><code>function updatePlayer()\n    drawText(\"Dans updatePlayer\", 10, 100, \"#00FF00\")  // Debug\n\n    if isKeyPressed(\"left\")\n        drawText(\"Touche gauche press\u00e9e\", 10, 120, \"#00FF00\")\n        playerX = playerX - speed\n    end\nend\n</code></pre> <ol> <li>Test par \u00e9tapes :</li> <li>Commenter des portions de code</li> <li>Tester une fonction \u00e0 la fois</li> <li>V\u00e9rifier les valeurs limites</li> </ol>"},{"location":"troubleshooting/#erreur-uncaught-syntaxerror","title":"\u2753 Erreur \"Uncaught SyntaxError\" ?","text":"<p>Cause : Erreur de compilation non d\u00e9tect\u00e9e.</p> <p>Solution : 1. V\u00e9rifiez tous les <code>end</code> 2. Contr\u00f4lez les guillemets : <code>\"</code> et <code>'</code> 3. V\u00e9rifiez les parenth\u00e8ses <code>()</code> 4. Rechargez la page et re-compilez</p>"},{"location":"troubleshooting/#le-jeu-fonctionne-sur-chrome-mais-pas-sur-firefox","title":"\u2753 Le jeu fonctionne sur Chrome mais pas sur Firefox ?","text":"<p>R\u00e9ponse : Probl\u00e8me de compatibilit\u00e9 navigateur.</p> <p>Solutions : - Utilisez Chrome ou Edge (recommand\u00e9s) - V\u00e9rifiez que JavaScript est activ\u00e9 - D\u00e9sactivez les bloqueurs de publicit\u00e9 sur la page - Testez en mode navigation priv\u00e9e</p>"},{"location":"troubleshooting/#comment-optimiser-mon-jeu","title":"\u2753 Comment optimiser mon jeu ?","text":"<p>Conseils performance :</p> <ol> <li>Limiter les calculs :</li> </ol> <pre><code>// \u2705 Calculer une fois, utiliser plusieurs fois\nlet distance = calculateDistance(player, enemy)\nif distance &lt; 50\n    handleCollision()\nend\nif distance &lt; 100\n    playWarningSound()\nend\n</code></pre> <ol> <li>\u00c9viter les boucles inutiles :</li> </ol> <pre><code>// \u274c Boucle lourde\nfor i = 1 to 1000\n    if i == targetValue\n        doSomething()\n    end\nend\n\n// \u2705 Acc\u00e8s direct\nif targetValue &lt;= 1000 &amp;&amp; targetValue &gt;= 1\n    doSomething()\nend\n</code></pre> <ol> <li>Grouper les dessins :</li> </ol> <pre><code>// \u2705 Dessiner par type/couleur\ndrawAllEnemies()      // Tous les ennemis ensemble\ndrawAllBullets()      // Toutes les balles ensemble  \ndrawAllPowerups()     // Tous les power-ups ensemble\n</code></pre>"},{"location":"troubleshooting/#cas-durgence","title":"\ud83d\udea8 Cas d'Urgence","text":""},{"location":"troubleshooting/#jeu-completement-casse","title":"Jeu compl\u00e8tement cass\u00e9 ?","text":"<ol> <li>Rechargez la page (F5)</li> <li>Copiez votre code dans un fichier texte</li> <li>Commencez par un exemple simple qui fonctionne</li> <li>R\u00e9int\u00e9grez votre code progressivement</li> </ol>"},{"location":"troubleshooting/#editeur-ne-repond-plus","title":"\u00c9diteur ne r\u00e9pond plus ?","text":"<ol> <li>Ctrl+A puis Ctrl+C (copier tout)</li> <li>Rechargez la page</li> <li>Ctrl+V (coller le code)</li> <li>Re-compilez</li> </ol> <p>Cette documentation de d\u00e9pannage couvre 95% des probl\u00e8mes rencontr\u00e9s. Pour des probl\u00e8mes sp\u00e9cifiques, analysez les messages d'erreur dans la console de debug !</p> <p>\ud83d\udd27 Bon d\u00e9pannage et bon coding ! \ud83d\ude80</p>"}]}